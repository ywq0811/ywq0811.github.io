<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yanwq</title>
  
  <subtitle>blog</subtitle>
  <link href="https://www.yanwq.com/atom.xml" rel="self"/>
  
  <link href="https://www.yanwq.com/"/>
  <updated>2024-03-20T08:50:56.487Z</updated>
  <id>https://www.yanwq.com/</id>
  
  <author>
    <name>yanwq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>windows 安装node</title>
    <link href="https://www.yanwq.com/2024/03/20/windows%E5%AE%89%E8%A3%85node/"/>
    <id>https://www.yanwq.com/2024/03/20/windows%E5%AE%89%E8%A3%85node/</id>
    <published>2024-03-20T08:40:35.597Z</published>
    <updated>2024-03-20T08:50:56.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows-安装node"><a class="markdownIt-Anchor" href="#windows-安装node"></a> windows 安装node</h2><p>1.官网下载</p><p><a href="https://nodejs.org/">https://nodejs.org/</a></p><p>2.下载完成打开安装包，一直下一步安装完成</p><p>3.重启命令行，执行 <code>node -v</code> 查看是否安装成功</p><p><img src="/imgs/image-20240320164345776.png" alt="image-20240320164345776" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windows-安装node&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#windows-安装node&quot;&gt;&lt;/a&gt; windows 安装node&lt;/h2&gt;
&lt;p&gt;1.官网下载&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodej</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.yanwq.com/categories/Windows/"/>
    
    
    <category term="node" scheme="https://www.yanwq.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>docker 部署mysql</title>
    <link href="https://www.yanwq.com/2024/03/20/docker%E9%83%A8%E7%BD%B2mysql5.7%E6%96%87%E6%A1%A3/"/>
    <id>https://www.yanwq.com/2024/03/20/docker%E9%83%A8%E7%BD%B2mysql5.7%E6%96%87%E6%A1%A3/</id>
    <published>2024-03-20T08:40:10.214Z</published>
    <updated>2024-03-20T08:40:10.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-部署mysql"><a class="markdownIt-Anchor" href="#docker-部署mysql"></a> docker 部署mysql</h2><h5 id="第1步从docker-hub拉取官方mysql镜像"><a class="markdownIt-Anchor" href="#第1步从docker-hub拉取官方mysql镜像"></a> 第1步：从Docker Hub拉取官方mysql镜像</h5><p>docker pull mysql:5.7</p><h5 id="第2步使用docker-images命令查看镜像"><a class="markdownIt-Anchor" href="#第2步使用docker-images命令查看镜像"></a> 第2步：使用docker images命令查看镜像</h5><h5 id="第3步启动我们的mysql的镜像创建一个mysql容器"><a class="markdownIt-Anchor" href="#第3步启动我们的mysql的镜像创建一个mysql容器"></a> 第3步：启动我们的mysql的镜像，创建一个MySQL容器</h5><p>使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure><p>解释一下这里的参数：</p><p>-d表示在后台运行，不随当前命令行窗口的退出而退出</p><p>–name给容器起一个别名，以后可以通过这个别名管理此容器</p><p>-p 3307：3307把宿主机的3307端口映射到Mysql容器的3306端口</p><p>-e MySQL容器的环境配置</p><h5 id="第4步查看我们已经启动的mysql容器"><a class="markdownIt-Anchor" href="#第4步查看我们已经启动的mysql容器"></a> 第4步：查看我们已经启动的mysql容器</h5><p>使用命令：docker ps</p><h5 id="第5步进入mysql容器使用的docker-exec命令-it是参数bash表示创建一个交互界面"><a class="markdownIt-Anchor" href="#第5步进入mysql容器使用的docker-exec命令-it是参数bash表示创建一个交互界面"></a> 第5步：进入MySQl容器：使用的docker exec命令，-it是参数，bash表示创建一个交互界面</h5><p>使用命令：docker exec -it mysql:5.7 /bin/bash</p><h5 id="第6步登录mysql的服务器使用的root用户登录的mysql在输入密码之后我们可以看到已经进去了的mysql"><a class="markdownIt-Anchor" href="#第6步登录mysql的服务器使用的root用户登录的mysql在输入密码之后我们可以看到已经进去了的mysql"></a> 第6步：登录MySQL的服务器：使用的root用户登录的MySQL，在输入密码之后，我们可以看到已经进去了的MySQL</h5><p>mysql -u root -p<br />输入密码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-部署mysql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docker-部署mysql&quot;&gt;&lt;/a&gt; docker 部署mysql&lt;/h2&gt;
&lt;h5 id=&quot;第1步从docker-hub拉取官方mysql镜像&quot;&gt;&lt;a c</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="mysql" scheme="https://www.yanwq.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>proto生成go文件指令</title>
    <link href="https://www.yanwq.com/2024/03/20/proto%E7%94%9F%E6%88%90go%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4/"/>
    <id>https://www.yanwq.com/2024/03/20/proto%E7%94%9F%E6%88%90go%E6%96%87%E4%BB%B6%E6%8C%87%E4%BB%A4/</id>
    <published>2024-03-20T08:40:10.214Z</published>
    <updated>2024-03-20T08:40:10.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="proto生成go文件指令"><a class="markdownIt-Anchor" href="#proto生成go文件指令"></a> proto生成go文件指令</h2><p>在当前目录下生成xxx.proto的pb文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protoc --go_out ./ ./xxx.proto</span><br><span class="line">或</span><br><span class="line">protoc --go_out=. --<span class="keyword">go</span>-grpc_out=. kvps_forward.proto</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --go_out=. --go_opt=paths=source_relative --<span class="keyword">go</span>-grpc_out=. --<span class="keyword">go</span>-grpc_opt=paths=source_relative  wenet<span class="number">.20230301</span>.proto</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;proto生成go文件指令&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#proto生成go文件指令&quot;&gt;&lt;/a&gt; proto生成go文件指令&lt;/h2&gt;
&lt;p&gt;在当前目录下生成xxx.proto的pb文件&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="Proto" scheme="https://www.yanwq.com/categories/Proto/"/>
    
    
    <category term="proto" scheme="https://www.yanwq.com/tags/proto/"/>
    
  </entry>
  
  <entry>
    <title>go-zero 生成和打包api和rpc</title>
    <link href="https://www.yanwq.com/2024/03/20/order%E6%89%93%E5%8C%85/"/>
    <id>https://www.yanwq.com/2024/03/20/order%E6%89%93%E5%8C%85/</id>
    <published>2024-03-20T08:40:10.214Z</published>
    <updated>2024-03-20T08:40:10.214Z</updated>
    
    <content type="html"><![CDATA[<h3 id="api"><a class="markdownIt-Anchor" href="#api"></a> api</h3><h5 id="1goctl-生成orderapi"><a class="markdownIt-Anchor" href="#1goctl-生成orderapi"></a> 1.goctl 生成order.api</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goctl api go -api order.api -dir .</span><br></pre></td></tr></table></figure><h5 id="2构建-order-api-二进制-文件"><a class="markdownIt-Anchor" href="#2构建-order-api-二进制-文件"></a> 2.构建 order-api 二进制 文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd api</span><br><span class="line"></span><br><span class="line">GOOS=linux GOARCH=amd64 go build -o order-api order.go</span><br></pre></td></tr></table></figure><h5 id="3构建order-api镜像"><a class="markdownIt-Anchor" href="#3构建order-api镜像"></a> 3.构建order-api镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t order-api:1.4.0 .</span><br></pre></td></tr></table></figure><h5 id="4保存镜像"><a class="markdownIt-Anchor" href="#4保存镜像"></a> 4.保存镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o order-api.img order-api:1.4.0</span><br></pre></td></tr></table></figure><h4 id="rpc"><a class="markdownIt-Anchor" href="#rpc"></a> rpc</h4><h5 id="1goctl生成orderporto"><a class="markdownIt-Anchor" href="#1goctl生成orderporto"></a> 1.goctl生成order.porto</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goctl rpc protoc order.proto --go_out=./types --go-grpc_out=./types --zrpc_out=.</span><br></pre></td></tr></table></figure><h5 id="2构建-order-rpc-二进制-文件"><a class="markdownIt-Anchor" href="#2构建-order-rpc-二进制-文件"></a> 2.构建 order-rpc 二进制 文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd rpc</span><br><span class="line"></span><br><span class="line">GOOS=linux GOARCH=amd64 go build -o order-rpc order.go</span><br></pre></td></tr></table></figure><h5 id="3构建announcement-api镜像"><a class="markdownIt-Anchor" href="#3构建announcement-api镜像"></a> 3.构建announcement-api镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t order-rpc:1.4.0 .</span><br></pre></td></tr></table></figure><h5 id="4保存镜像-2"><a class="markdownIt-Anchor" href="#4保存镜像-2"></a> 4.保存镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o order-rpc.img order-rpc:1.4.0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;api&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#api&quot;&gt;&lt;/a&gt; api&lt;/h3&gt;
&lt;h5 id=&quot;1goctl-生成orderapi&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1goctl-生成</summary>
      
    
    
    
    <category term="Go" scheme="https://www.yanwq.com/categories/Go/"/>
    
    
    <category term="go-zero" scheme="https://www.yanwq.com/tags/go-zero/"/>
    
  </entry>
  
  <entry>
    <title>linux自带定时器操作文档</title>
    <link href="https://www.yanwq.com/2024/03/20/linux%E8%87%AA%E5%B8%A6%E5%AE%9A%E6%97%B6%E5%99%A8%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3/"/>
    <id>https://www.yanwq.com/2024/03/20/linux%E8%87%AA%E5%B8%A6%E5%AE%9A%E6%97%B6%E5%99%A8%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3/</id>
    <published>2024-03-20T08:40:10.214Z</published>
    <updated>2024-03-20T08:40:10.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux自带定时器操作文档"><a class="markdownIt-Anchor" href="#linux自带定时器操作文档"></a> linux自带定时器操作文档</h2><p>计划任务是需要在指定时间执行的任务或者是周期性执行的任务，比如凌晨3点重启设备，每周对日志文件备份等。Linux系统会内置at和cron服务，at服务用来在指定时间执行任务，cron用来周期性执行任务。</p><h4 id="一at一次性任务"><a class="markdownIt-Anchor" href="#一at一次性任务"></a> 一.at一次性任务</h4><p><a href="https://blog.csdn.net/weixin_40228200/article/details/120711676">参考连接</a></p><h4 id="二cron周期性任务"><a class="markdownIt-Anchor" href="#二cron周期性任务"></a> 二.cron周期性任务</h4><p>1、cron周期性任务依赖于系统后台的crond进程，类似于at，我们也要首先确认cron服务是否开启，执行命令：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status crond</span><br></pre></td></tr></table></figure><p>2、启动crontab服务</p><p>一般启动服务用 /sbin/service crond start 若是根用户的cron服务可以用 sudo service crond start， 这里还是要注意 下 不同版本linux系统启动的服务的命令也不同 ，像我的虚拟机里只需用 sudo service cron restart 即可，若是在根用下直接键入service cron start就能启动服务</p><p>3、查看服务是否已经运行用 ps -ax | grep cron</p><p>cron.daily是每天执行一次的job</p><p>cron.weekly是每个星期执行一次的job</p><p>cron.monthly是每月执行一次的job</p><p>cron.hourly是每个小时执行一次的job</p><p>cron.d是系统自动定期需要做的任务</p><p>crontab是设定定时任务执行文件</p><p>cron.deny文件就是用于控制不让哪些用户使用Crontab的功能</p><p>4.用户配置文件：</p><p>每个用户都有自己的cron配置文件,通过crontab -e 就可以编辑,一般情况下我们编辑好用户的cron配置文件保存退出后,系统会自动就存放于/var/spool/cron/目录中,文件以用户名命名.linux的cron服务是每隔一分钟去读取一次/var/spool/cron,/etc/crontab,/etc/cron.d下面所有的内容.</p><p>5.crontab文件格式：</p><ul><li><pre><code>      *          *        *          *             command</code></pre></li></ul><p>minute   hour    day   month   week      command</p><p>分          时         天      月        星期       命令</p><p>minute： 表示分钟，可以是从0到59之间的任何整数。</p><p>hour：表示小时，可以是从0到23之间的任何整数。</p><p>day：表示日期，可以是从1到31之间的任何整数。</p><p>month：表示月份，可以是从1到12之间的任何整数。</p><p>week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。</p><p>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</p><p>6、crontab命令</p><p>cron服务提供crontab命令来设定cron服务的，以下是这个命令的一些参数与说明:</p><p>crontab -u //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数</p><p>crontab -l //列出某个用户cron服务的详细内容</p><p>crontab -r //删除没个用户的cron服务</p><p>crontab -e //编辑某个用户的cron服务</p><p>比如说root查看自己的cron设置:crontab -u root -l</p><p>再例如，root想删除fred的cron设置:crontab -u fred -r</p><h4 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h4><p>当前是root用户</p><p>1.创建一个root用户底下的定时任务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -u root -e</span><br></pre></td></tr></table></figure><p>如下是编辑器内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">2</span> * */<span class="number">6</span> * /home/yanwq/kvp-cmsb/cleanlog</span><br><span class="line"></span><br><span class="line">注释：每隔<span class="number">6</span>个月的<span class="number">2</span>点执行cleanlog脚本</span><br></pre></td></tr></table></figure><p>操作成功图:</p><p><img src="/imgs/8B8FFDA8-1890-4eac-A6CF-787B68E1D4D1.png" alt="8B8FFDA8-1890-4eac-A6CF-787B68E1D4D1" /></p><p>2.查看root用户底下的定时任务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -u root -l</span><br></pre></td></tr></table></figure><p>操作成功图:</p><p><img src="/imgs/F4C413D6-17FC-470e-A5AC-590E74F27694.png" alt="F4C413D6-17FC-470e-A5AC-590E74F27694" /></p><p>如果刚创建完定时任务，执行<code>crontab -u root -l</code>没有结果，需要重新加载cron服务，每个linux系统启动的服务命令是不一样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/service crond reload</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;linux自带定时器操作文档&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#linux自带定时器操作文档&quot;&gt;&lt;/a&gt; linux自带定时器操作文档&lt;/h2&gt;
&lt;p&gt;计划任务是需要在指定时间执行的任务或者是周期性执行的任务，比如凌晨3点重</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.yanwq.com/categories/Linux/"/>
    
    
    <category term="cron" scheme="https://www.yanwq.com/tags/cron/"/>
    
  </entry>
  
  <entry>
    <title>windows安装sqlite以及使用文档</title>
    <link href="https://www.yanwq.com/2024/03/20/windows%E5%AE%89%E8%A3%85sqlite%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.yanwq.com/2024/03/20/windows%E5%AE%89%E8%A3%85sqlite%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2024-03-20T08:40:10.214Z</published>
    <updated>2024-03-20T08:40:10.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows安装sqlite以及使用文档"><a class="markdownIt-Anchor" href="#windows安装sqlite以及使用文档"></a> windows安装sqlite以及使用文档</h2><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><p>1.进入官网安装包下载路径:<a href="https://www.sqlite.org/download.html">https://www.sqlite.org/download.html</a> 选择windows版本下载</p><p><img src="/imgs/image-20221122110759002.png" alt="image-20221122110759002" /></p><p>2.选择路径加入下载的文件，我的路径D:\java\sqlite（或者C:\sqlite下）</p><p>3.将下载解压出来的5个文件，拷贝到D:\java\sqlite</p><p><img src="/imgs/image-20221122111114287.png" alt="image-20221122111114287" /></p><p>4.将D:\java\sqlite加入到环境变量</p><p><img src="/imgs/image-20221122111148921.png" alt="image-20221122111148921" /></p><p>5.打开cmd，输入’sqlite3’，将显示SQLite版本即表示安装成功</p><p><img src="/imgs/image-20221122111256545.png" alt="image-20221122111256545" /></p><p>提示：红色字体表示目前未指定相关数据库文件，而是以内存作为数据表等的存储位置</p><h4 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h4><p>sqlite没用管理界面，只能在命令行中进行crud。（或者自行安装可视化管理界面）</p><p>以下操作都需要在环境变量路径下执行cmd，再执行<code>sqlite3</code>后执行</p><p>1.创建数据库，创建的数据库存储在sqlite3.exe所在的文件夹</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.open test.db    <span class="comment">//test.db 就是创建的数据库</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20221122112012587.png" alt="image-20221122112012587" /></p><p>效果图：</p><p><img src="/imgs/image-20221122112038745.png" alt="image-20221122112038745" /></p><p>2.查看数据库</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.databases</span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="/imgs/image-20221122112212621.png" alt="image-20221122112212621" /></p><p>（我这里是删除了test.db 数据库，重新建了一个kfa-workstation.db 数据库）</p><p>[其他参考][<a href="https://www.likecs.com/show-205144414.html">https://www.likecs.com/show-205144414.html</a>]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windows安装sqlite以及使用文档&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#windows安装sqlite以及使用文档&quot;&gt;&lt;/a&gt; windows安装sqlite以及使用文档&lt;/h2&gt;
&lt;h4 id=&quot;安装&quot;&gt;&lt;a cla</summary>
      
    
    
    
    <category term="DB" scheme="https://www.yanwq.com/categories/DB/"/>
    
    
    <category term="db" scheme="https://www.yanwq.com/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>wsl2-Ubuntu 安装 go</title>
    <link href="https://www.yanwq.com/2024/03/20/wsl2-ubuntu%E8%A3%85go/"/>
    <id>https://www.yanwq.com/2024/03/20/wsl2-ubuntu%E8%A3%85go/</id>
    <published>2024-03-20T08:40:10.214Z</published>
    <updated>2024-03-20T08:40:10.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows安装sqlite以及使用文档"><a class="markdownIt-Anchor" href="#windows安装sqlite以及使用文档"></a> windows安装sqlite以及使用文档</h2><p>1.重装ubuntu18.04</p><p>2.sudo su 进入root权限</p><ol start="3"><li><p>cd /mnt/d/share  进入到d盘share文件夹下</p></li><li><p>cp go1.16.6.linux-amd64.tar.gz /usr/local/  讲share文件夹下的go.tar拷贝到/usr/local 目录下</p></li></ol><p><a href="http://5.cd">5.cd</a> /usr/local</p><p>6.tar -xvf go.tar  解压go.tar文件</p><p>7.rm -rf go.tar</p><p>8.vim /etc/profile<br />添加：<br />export GOROOT=/usr/local/go<br />export GOPATH=/mnt/d/vagrant/data/gopath/src<br />export GOPROXY=<a href="http://goproxy.cn">http://goproxy.cn</a><br />export <a href="http://GOSUMDB=goproxy.cn">GOSUMDB=goproxy.cn</a><br />export PATH=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mi>O</mi><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mi mathvariant="normal">/</mi><mi>b</mi><mi>i</mi><mi>n</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">GOPATH/bin:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord">/</span><span class="mord mathnormal">b</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>GOROOT/bin:$PATH<br />export SHARE=/mnt/d/share</p><p>9.source /etc/profile</p><p>10.go version</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windows安装sqlite以及使用文档&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#windows安装sqlite以及使用文档&quot;&gt;&lt;/a&gt; windows安装sqlite以及使用文档&lt;/h2&gt;
&lt;p&gt;1.重装ubuntu18.04</summary>
      
    
    
    
    <category term="Ubuntu" scheme="https://www.yanwq.com/categories/Ubuntu/"/>
    
    
    <category term="wsl2" scheme="https://www.yanwq.com/tags/wsl2/"/>
    
    <category term="go" scheme="https://www.yanwq.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>解决http.Get()方法请求https 证书报错问题</title>
    <link href="https://www.yanwq.com/2024/03/20/%E8%A7%A3%E5%86%B3http.Get%20%E8%AF%B7%E6%B1%82https%E8%AF%81%E4%B9%A6%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>https://www.yanwq.com/2024/03/20/%E8%A7%A3%E5%86%B3http.Get%20%E8%AF%B7%E6%B1%82https%E8%AF%81%E4%B9%A6%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</id>
    <published>2024-03-20T08:40:10.214Z</published>
    <updated>2024-03-20T08:40:10.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决httpget方法请求https-证书报错问题"><a class="markdownIt-Anchor" href="#解决httpget方法请求https-证书报错问题"></a> 解决http.Get()方法请求https 证书报错问题</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resp,err := http.Get(<span class="string">&quot;https://XXX&quot;</span>)</span><br><span class="line"></span><br><span class="line">报错：x509: certificate signed by unknown authority</span><br></pre></td></tr></table></figure><p>原因：http.Get()会对传过来的数字证书进行校验，但是这个证书是由不知名CA签发的</p><p>解决方法：</p><ol><li><p>修改client.go代码。让client端忽略对证书的校验：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过设置tls.Config的InsecureSkipVerify为true，client将不再对服务端的证书进行校验。</span></span><br><span class="line">tr := &amp;http.Transport&#123;</span><br><span class="line">        TLSClientConfig:    &amp;tls.Config&#123;InsecureSkipVerify: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    client := &amp;http.Client&#123;Transport: tr&#125;</span><br><span class="line"></span><br><span class="line">    resp, err := client.Get(<span class="string">&quot;https://localhost:8081&quot;</span>)</span><br></pre></td></tr></table></figure><p>这种做法可以解决问题，但是可能在生产环境下不进行校验，可能存在风险</p></li><li><p>将CA证书放在项目代码下，加入到dockerfile里</p><p>每台ubunt上都有CA证书，在目录<code>/etc/ssl/certs</code>下，都有<code>ca-certificates.crt</code>这个就是证书，将他拷贝到项目代码下，以asr-svc为例</p></li></ol><p><img src="/imgs/image-20221115172937769.png" alt="image-20221115172937769" /></p><p>然后再dockerfile加入证书</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /etc/ssl/certs</span><br><span class="line">ADD ca-certificates.crt .</span><br></pre></td></tr></table></figure><p>即可，打包镜像，运行代码。</p><p><a href="https://www.cnblogs.com/ficow/p/13945920.html">参考文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解决httpget方法请求https-证书报错问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解决httpget方法请求https-证书报错问题&quot;&gt;&lt;/a&gt; 解决http.Get()方法请求https 证书报错问题&lt;/h2&gt;
&lt;fi</summary>
      
    
    
    
    <category term="Go" scheme="https://www.yanwq.com/categories/Go/"/>
    
    
    <category term="https" scheme="https://www.yanwq.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>重装 windows ubuntu</title>
    <link href="https://www.yanwq.com/2024/03/20/%E9%87%8D%E8%A3%85windows%20ubunut/"/>
    <id>https://www.yanwq.com/2024/03/20/%E9%87%8D%E8%A3%85windows%20ubunut/</id>
    <published>2024-03-20T08:40:10.214Z</published>
    <updated>2024-03-20T08:40:10.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重装-windows-ubuntu"><a class="markdownIt-Anchor" href="#重装-windows-ubuntu"></a> 重装 windows ubuntu</h2><p>1.<a href="https://www.yuque.com/shaycormac/blog/tn88q0">https://www.yuque.com/shaycormac/blog/tn88q0</a> 根据这个文档安装wls2和docker destop</p><p>2.windows商店下载terminal</p><p>3.配置/etc/profile</p><p>4.保存配置 source profile</p><p>5.下载go</p><p>6.更新源</p><p><a href="https://www.cnblogs.com/ssxblog/p/11357126.html">https://www.cnblogs.com/ssxblog/p/11357126.html</a></p><p>7.安装mingw</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install gcc</span><br></pre></td></tr></table></figure><p>8.开始编译二进制文件（刚从gitlub clone下来需要go mod tidy）</p><p>9使用<code>make image</code>命令需要先安装apt install make 和 apt install make-guile ,可以按要求直接安装.</p><p>10.需要加载基础镜像<code>kvp-centos-ffmpeg-minial.img</code></p><p>(在/d/java/share里面),然后执行<code>docker load -i kvp-centos-ffmpeg-minial.img</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;重装-windows-ubuntu&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#重装-windows-ubuntu&quot;&gt;&lt;/a&gt; 重装 windows ubuntu&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://www.yuqu</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.yanwq.com/categories/Windows/"/>
    
    
    <category term="ubuntu" scheme="https://www.yanwq.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>docker consul 集群部署</title>
    <link href="https://www.yanwq.com/2024/03/20/docker%20consul%20%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>https://www.yanwq.com/2024/03/20/docker%20consul%20%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</id>
    <published>2024-03-20T08:40:10.210Z</published>
    <updated>2024-03-20T08:40:10.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-consul-集群部署"><a class="markdownIt-Anchor" href="#docker-consul-集群部署"></a> docker consul 集群部署</h2><p>本文档演示的在一台服务器上部署节点=3的consul集群</p><h3 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h3><p>1.在宿主机上分别建立目录 <code>server1</code> 、<code>server2</code> 、<code>server3</code> 文件夹，并对应创建<code>config</code> 、<code>data</code> 、<code>log</code> 文件夹</p><p>其中：</p><ul><li><code>config</code> ：配置文件路径。也是docker启动时读取的配置文件路径</li><li><code>data</code> ：数据存储路径。docker启动时挂载到容器中的指定路径</li><li><code>log</code> ：日志输出路径。（可以不落盘日志，本文档演示的是落盘日志）</li></ul><p><img src="./images/1.png" alt="image-20240226144216083" /></p><hr /><h3 id="单点部署"><a class="markdownIt-Anchor" href="#单点部署"></a> 单点部署</h3><h5 id="server1"><a class="markdownIt-Anchor" href="#server1"></a> server1</h5><p>1.进入到 <code>config</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd server1/config</span><br></pre></td></tr></table></figure><p>2.创建 <code>config.json</code> 配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config.json</span><br></pre></td></tr></table></figure><p><img src="/imgs/2.png" alt="image-20240226151703284" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">    &quot;bootstrap_expect&quot;: 1,</span><br><span class="line">    &quot;data_dir&quot;: &quot;/consul/data&quot;,</span><br><span class="line">    &quot;log_file&quot;: &quot;/consul/log/&quot;,</span><br><span class="line">    &quot;log_level&quot;: &quot;INFO&quot;,</span><br><span class="line">    &quot;node_name&quot;: &quot;consul_server_1&quot;,</span><br><span class="line">    &quot;client_addr&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server&quot;: true,</span><br><span class="line">    &quot;ui&quot;: true,</span><br><span class="line">    &quot;enable_script_checks&quot;: true,</span><br><span class="line">    &quot;addresses&quot;: &#123;</span><br><span class="line">        &quot;https&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">        &quot;dns&quot;: &quot;0.0.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>datacenter</code>：指定consul的数据中心名称</li><li><code>bootstrap_expect</code>：指定启动时需要的最少节点数</li><li><code>data_dir</code>：指定consul在运行过程中存储数据的目录路径（容器内路径）</li><li><code>log_file</code>：指定consul输出的日志路径（容器内路径）</li><li><code>log_level</code>：指定consul日志输出的等级</li><li><code>node_name</code>：指定consul的节点名称</li><li><code>client_addr</code>：指定consul客户端访问地址</li><li><code>server</code>：指定是否是server节点</li><li><code>ui</code>：指定是否启用consul的web管理界面</li><li><code>enable_script_checks</code>：指定是否启用支持脚本检查（Script Checks）功能。脚本检查允许用户通过自定义的脚本来检查服务的健康状态。</li><li><code>addresses</code>：指定Consul agent监听的IP地址</li></ul><p><img src="/imgs/image-20240226172420932.png" alt="image-20240226172420932" /></p><p><code>log_file</code>： 应该是 “/consul/log/”</p><p>3.配置启动命令</p><p>在<code>server1</code> 目录下 创建启动脚本<code>run.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir run.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run -d -p 8500:8500 --name=consul_server_1 -v $PWD/data:/consul/data -v $PWD/config:/consul/config -v $PWD/log:/consul/log -e CONSUL_BIND_INTERFACE=&#x27;eth0&#x27; consul agent -config-dir=/consul/config/config.json</span><br></pre></td></tr></table></figure><p>参数说明</p><ul><li><p><code>-d</code>：在后台运行容器。</p></li><li><p><code>-p 8500:8500</code>：指定容器内端口和宿主机端口的映射关系，将容器内的8500端口映射到宿主机的8500端口上。</p></li><li><p><code>--name=consul_server_1</code> ：指定容器名称为consul_server_1。</p></li><li><p><code>-v $PWD/data:/consul/data</code>：挂载宿主机上的数据存储目录到容器中的<code>/consul/data</code> 目录</p></li><li><p><code>-v $PWD/config:/consul/config</code>：挂载宿主机上的配置文件目录到容器中的<code>/consul/config</code> 目录</p></li><li><p><code>-v $PWD/log:/consul/log</code>：挂载宿主机上的日志输出目录到容器中的<code>/consul/log</code> 目录</p></li><li><p><code>-e CONSUL_BIND_INTERFACE='eth0'</code>：通过环境变量<code>CONSUL_BIND_INTERFACE</code>指定Consul绑定的网卡接口为eth0</p></li><li><p><code>consul agent</code> ：启动consul agent</p></li><li><p><code>-config-dir=/consul/config/config.json</code>：指定配置文件路径（容器内），consul会自动读取配置文件中的参数</p></li></ul><p><img src="/imgs/image-20240226161814054.png" alt="image-20240226161814054" /></p><p>4.启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh run.sh</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240226172625032.png" alt="image-20240226172625032" /></p><p>5.通过网页打开<a href="http://127.0.0.1:8500/ui%E7%9C%8B%E6%98%AF%E5%90%A6%E8%83%BD%E7%9C%8B%E5%88%B0consul%E7%9C%8B%E6%9D%BF">http://127.0.0.1:8500/ui看是否能看到consul看板</a></p><h5 id="加入acl认证"><a class="markdownIt-Anchor" href="#加入acl认证"></a> 加入ACL认证</h5><p>1.使用linux的命令生成一个64位的UUID作为master token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uuidgen</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">487d910a-a599-49b5-979e-57855e53b3b0</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240226174005313.png" alt="image-20240226174005313" /></p><p>2.编写acl.hcl文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config/acl.hcl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">acl &#123;</span><br><span class="line">  enabled = true</span><br><span class="line">  default_policy = &quot;deny&quot;</span><br><span class="line">  enable_token_persistence = true</span><br><span class="line">  tokens &#123;</span><br><span class="line">    master = &quot;487d910a-a599-49b5-979e-57855e53b3b0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240226174126814.png" alt="image-20240226174126814" /></p><p>3.重启服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart consul_server_1</span><br></pre></td></tr></table></figure><p>4.访问UI，提示需要输入token，输入上面配置的master token即可</p><p><img src="/imgs/image-20240226174320743.png" alt="image-20240226174320743" /></p><hr /><h3 id="集群部署"><a class="markdownIt-Anchor" href="#集群部署"></a> 集群部署</h3><h4 id="一台服务器部署"><a class="markdownIt-Anchor" href="#一台服务器部署"></a> 一台服务器部署</h4><p>在一台服务器上部署consul集群，docker run命令可以使用-p 和 -e CONSUL_BIND_INTERFACE=‘eth0’ 的方式。因为在同一台服务器上，容器网卡是eth0。</p><h5 id="server1-2"><a class="markdownIt-Anchor" href="#server1-2"></a> server1</h5><p>1.进入到 <code>config</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd server1/config</span><br></pre></td></tr></table></figure><p>2.创建 <code>config.json</code> 配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config.json</span><br></pre></td></tr></table></figure><p><img src="/imgs/2.png" alt="image-20240226151703284" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">    &quot;bootstrap_expect&quot;: 3,</span><br><span class="line">    &quot;data_dir&quot;: &quot;/consul/data&quot;,</span><br><span class="line">    &quot;log_file&quot;: &quot;/consul/log/&quot;,</span><br><span class="line">    &quot;log_level&quot;: &quot;INFO&quot;,</span><br><span class="line">    &quot;node_name&quot;: &quot;consul_server_1&quot;,</span><br><span class="line">    &quot;client_addr&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server&quot;: true,</span><br><span class="line">    &quot;ui&quot;: true,</span><br><span class="line">    &quot;enable_script_checks&quot;: true,</span><br><span class="line">    &quot;addresses&quot;: &#123;</span><br><span class="line">        &quot;https&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">        &quot;dns&quot;: &quot;0.0.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>datacenter</code>：指定consul的数据中心名称</li><li><code>bootstrap_expect</code>：指定启动时需要的最少节点数</li><li><code>data_dir</code>：指定consul在运行过程中存储数据的目录路径（容器内路径）</li><li><code>log_file</code>：指定consul输出的日志路径（容器内路径）</li><li><code>log_level</code>：指定consul日志输出的等级</li><li><code>node_name</code>：指定consul的节点名称</li><li><code>client_addr</code>：指定consul客户端访问地址</li><li><code>server</code>：指定是否是server节点</li><li><code>ui</code>：指定是否启用consul的web管理界面</li><li><code>enable_script_checks</code>：指定是否启用支持脚本检查（Script Checks）功能。脚本检查允许用户通过自定义的脚本来检查服务的健康状态。</li><li><code>addresses</code>：指定Consul agent监听的IP地址</li></ul><p><img src="/imgs/image-20240226161334661.png" alt="image-20240226161334661" /></p><p><code>log_file</code>： 应该是 “/consul/log/”</p><p>3.配置启动命令</p><p>在<code>server1</code> 目录下 创建启动脚本<code>run.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir run.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run -d -p 8500:8500 --name=consul_server_1 -v $PWD/data:/consul/data -v $PWD/config:/consul/config -v $PWD/log:/consul/log -e CONSUL_BIND_INTERFACE=&#x27;eth0&#x27; consul agent -config-dir=/consul/config/config.json</span><br></pre></td></tr></table></figure><p>参数说明</p><ul><li><p><code>-d</code>：在后台运行容器。</p></li><li><p><code>-p 8500:8500</code>：指定容器内端口和宿主机端口的映射关系，将容器内的8500端口映射到宿主机的8500端口上。</p></li><li><p><code>--name=consul_server_1</code> ：指定容器名称为consul_server_1。</p></li><li><p><code>-v $PWD/data:/consul/data</code>：挂载宿主机上的数据存储目录到容器中的<code>/consul/data</code> 目录</p></li><li><p><code>-v $PWD/config:/consul/config</code>：挂载宿主机上的配置文件目录到容器中的<code>/consul/config</code> 目录</p></li><li><p><code>-v $PWD/log:/consul/log</code>：挂载宿主机上的日志输出目录到容器中的<code>/consul/log</code> 目录</p></li><li><p><code>-e CONSUL_BIND_INTERFACE='eth0'</code>：通过环境变量<code>CONSUL_BIND_INTERFACE</code>指定Consul绑定的网卡接口为eth0</p></li><li><p><code>consul agent</code> ：启动consul agent</p></li><li><p><code>-config-dir=/consul/config/config.json</code>：指定配置文件路径（容器内），consul会自动读取配置文件中的参数</p></li></ul><p><img src="/imgs/image-20240226161814054.png" alt="image-20240226161814054" /></p><p>4.启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh run.sh</span><br></pre></td></tr></table></figure><p>启动后，因为配置了bootstrap_expect=3，但只启动了一个server，所以会报错：没有集群领导者</p><p><img src="/imgs/4.png" alt="4" /></p><p>需要把另外2个服务也启动起来！</p><h5 id="server2"><a class="markdownIt-Anchor" href="#server2"></a> server2</h5><p>1.进入到 <code>config</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd server2/config</span><br></pre></td></tr></table></figure><p>2.创建 <code>config.json</code> 配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">    &quot;bootstrap_expect&quot;: 3,</span><br><span class="line">    &quot;data_dir&quot;: &quot;/consul/data&quot;,</span><br><span class="line">    &quot;log_file&quot;: &quot;/consul/log/&quot;,</span><br><span class="line">    &quot;log_level&quot;: &quot;INFO&quot;,</span><br><span class="line">    &quot;node_name&quot;: &quot;consul_server_2&quot;,</span><br><span class="line">    &quot;client_addr&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server&quot;: true,</span><br><span class="line">    &quot;ui&quot;: true,</span><br><span class="line">    &quot;enable_script_checks&quot;: true,</span><br><span class="line">    &quot;addresses&quot;: &#123;</span><br><span class="line">        &quot;https&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">        &quot;dns&quot;: &quot;0.0.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.配置启动令</p><p>在<code>server2</code> 目录下 创建启动脚本<code>run.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir run.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run -d -p 8510:8500 --name=consul_server_2 -v $PWD/data:/consul/data -v $PWD/config:/consul/config -v $PWD/log:/consul/log -e CONSUL_BIND_INTERFACE=&#x27;eth0&#x27; consul agent -config-dir=/consul/config/config.json</span><br></pre></td></tr></table></figure><p>4.启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh run.sh</span><br></pre></td></tr></table></figure><p>5.加入集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it consul_server_3 consul join &#123;consul_server_1.IP&#125;</span><br></pre></td></tr></table></figure><h5 id="server3"><a class="markdownIt-Anchor" href="#server3"></a> server3</h5><p>1.进入到 <code>config</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd server3/config</span><br></pre></td></tr></table></figure><p>2.创建 <code>config.json</code> 配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">    &quot;bootstrap_expect&quot;: 3,</span><br><span class="line">    &quot;data_dir&quot;: &quot;/consul/data&quot;,</span><br><span class="line">    &quot;log_file&quot;: &quot;/consul/log/&quot;,</span><br><span class="line">    &quot;log_level&quot;: &quot;INFO&quot;,</span><br><span class="line">    &quot;node_name&quot;: &quot;consul_server_3&quot;,</span><br><span class="line">    &quot;client_addr&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server&quot;: true,</span><br><span class="line">    &quot;ui&quot;: true,</span><br><span class="line">    &quot;enable_script_checks&quot;: true,</span><br><span class="line">    &quot;addresses&quot;: &#123;</span><br><span class="line">        &quot;https&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">        &quot;dns&quot;: &quot;0.0.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.配置启动命令</p><p>在<code>server3</code> 目录下 创建启动脚本<code>run.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir run.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run -d -p 8520:8500 --name=consul_server_3 -v $PWD/data:/consul/data -v $PWD/config:/consul/config -v $PWD/log:/consul/log -e CONSUL_BIND_INTERFACE=&#x27;eth0&#x27; consul agent -config-dir=/consul/config/config.json</span><br></pre></td></tr></table></figure><p>4.启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh run.sh</span><br></pre></td></tr></table></figure><p>5.加入集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it consul_server_3 consul join &#123;consul_server_1.IP&#125;</span><br></pre></td></tr></table></figure><h5 id="加入acl认证-2"><a class="markdownIt-Anchor" href="#加入acl认证-2"></a> 加入ACL认证</h5><p>1.生成UUID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uuidgen</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.分别在<code>consul_server_1</code> 、<code>consul_server_2</code> 、<code>consul_server_3</code> 的<code>config</code> 文件夹中新增<code>acl.hcl</code> 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config/acl.hcl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">primary_datacenter = &quot;dc1&quot;</span><br><span class="line">acl &#123;</span><br><span class="line">  enabled = true</span><br><span class="line">  default_policy = &quot;deny&quot;</span><br><span class="line">  enable_token_persistence = true</span><br><span class="line">  tokens &#123;</span><br><span class="line">    master = &quot;487d910a-a599-49b5-979e-57855e53b3b0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>enabled = true</code>：代表开启ACL</li><li><code>default_policy=“deny”</code>：默认为allow，如果需要自定义权限，需要将其设置为deny</li><li><code>enable_token_persistence =true</code>： 开启token持久化，将token持久化到磁盘上</li></ul><p>3.重启 <code>consul_server_1</code> 、 <code>consul_server_2</code> 、<code>consul_server_3</code> 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker restart consul_server_1</span><br><span class="line"></span><br><span class="line">docker restart consul_server_2</span><br><span class="line"></span><br><span class="line">docker restart consul_server_3</span><br></pre></td></tr></table></figure><p>5.启动UI界面查看，登录需要<code>secreatID</code>验证，即输入<code>acl.hcl</code> 配置文件中的<code>master</code> token</p><hr /><h4 id="多台服务器部署"><a class="markdownIt-Anchor" href="#多台服务器部署"></a> 多台服务器部署</h4><p>目前查找到能部署成功的方式是通过network的方式。</p><h5 id="server1-3"><a class="markdownIt-Anchor" href="#server1-3"></a> server1</h5><p>服务器IP：192.168.26.73</p><p>1.进入到 <code>config</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd server1/config</span><br></pre></td></tr></table></figure><p>2.创建 <code>config.json</code> 配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config.json</span><br></pre></td></tr></table></figure><p>![image-20240226151703284](/imgs/2.png</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">    &quot;bootstrap_expect&quot;: 3,</span><br><span class="line">    &quot;data_dir&quot;: &quot;/consul/data&quot;,</span><br><span class="line">    &quot;log_file&quot;: &quot;/consul/log/&quot;,</span><br><span class="line">    &quot;log_level&quot;: &quot;INFO&quot;,</span><br><span class="line">    &quot;node_name&quot;: &quot;consul_server_1&quot;,</span><br><span class="line">    &quot;client_addr&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server&quot;: true,</span><br><span class="line">    &quot;ui&quot;: true,</span><br><span class="line">    &quot;enable_script_checks&quot;: true,</span><br><span class="line">    &quot;addresses&quot;: &#123;</span><br><span class="line">        &quot;https&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">        &quot;dns&quot;: &quot;0.0.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240226161334661.png" alt="image-20240226161334661" /></p><p><code>log_file</code>： 应该是 “/consul/log/”</p><p>3.配置启动命令</p><p>在<code>server1</code> 目录下 创建启动脚本<code>run.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir run.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run -d --net=host --name=consul_server_1 -v $PWD/data:/consul/data -v $PWD/config:/consul/config -v $PWD/log:/consul/log -e CONSUL_BIND_INTERFACE=&#x27;ens192&#x27; consul agent -bind=192.168.26.73 -config-dir=/consul/config/config.json</span><br></pre></td></tr></table></figure><p>参数说明</p><ul><li><code>-d</code>：在后台运行容器。</li><li><code>--network=host</code>：将容器连接到名为host的网络</li><li><code>--name=consul_server_1</code> ：指定容器名称为consul_server_1。</li><li><code>-v $PWD/data:/consul/data</code>：挂载宿主机上的数据存储目录到容器中的<code>/consul/data</code> 目录</li><li><code>-v $PWD/config:/consul/config</code>：挂载宿主机上的配置文件目录到容器中的<code>/consul/config</code> 目录</li><li><code>-v $PWD/log:/consul/log</code>：挂载宿主机上的日志输出目录到容器中的<code>/consul/log</code> 目录</li><li><code>-e CONSUL_BIND_INTERFACE='ens192'</code>：通过环境变量<code>CONSUL_BIND_INTERFACE</code>指定Consul绑定的网卡接口为<code>ens192</code>（这个根据实际的网卡名称，通过<code>ifconfig</code> 命令查看）</li><li><code>consul agent</code> ：启动consul agent</li><li><code>-bind=192.168.26.73</code>：指定Consul节点在Docker容器内监听的IP地址（服务器IP）</li><li><code>-config-dir=/consul/config/config.json</code>：指定配置文件路径（容器内），consul会自动读取配置文件中的参数</li></ul><p><img src="/imgs/image-20240227174226118.png" alt="image-20240227174226118" /></p><p>4.启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh run.sh</span><br></pre></td></tr></table></figure><p>启动后，因为配置了bootstrap_expect=3，但只启动了一个server，所以会报错：没有集群领导者</p><p><img src="/imgs/4.png" alt="4" /></p><p>需要把另外2个服务也启动起来！</p><h5 id="server2-2"><a class="markdownIt-Anchor" href="#server2-2"></a> server2</h5><p>服务器IP：192.168.26.74</p><p>1.进入到 <code>config</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd server2/config</span><br></pre></td></tr></table></figure><p>2.创建 <code>config.json</code> 配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">    &quot;bootstrap_expect&quot;: 3,</span><br><span class="line">    &quot;data_dir&quot;: &quot;/consul/data&quot;,</span><br><span class="line">    &quot;log_file&quot;: &quot;/consul/log/&quot;,</span><br><span class="line">    &quot;log_level&quot;: &quot;INFO&quot;,</span><br><span class="line">    &quot;node_name&quot;: &quot;consul_server_2&quot;,</span><br><span class="line">    &quot;client_addr&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server&quot;: true,</span><br><span class="line">    &quot;ui&quot;: true,</span><br><span class="line">    &quot;enable_script_checks&quot;: true,</span><br><span class="line">    &quot;addresses&quot;: &#123;</span><br><span class="line">        &quot;https&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">        &quot;dns&quot;: &quot;0.0.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.配置启动命令</p><p>在<code>server2</code> 目录下 创建启动脚本<code>run.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir run.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run -d --network=host --name=consul_server_2 -v $PWD/data:/consul/data -v $PWD/config:/consul/config -v $PWD/log:/consul/log -e CONSUL_BIND_INTERFACE=&#x27;ens192&#x27; consul agent -bind=192.168.26.74 -join=192.168.26.73</span><br></pre></td></tr></table></figure><p>参数说明</p><ul><li><code>-join=192.168.26.73</code>：将节点加入到<code>consul_server_1</code> IP上</li></ul><p><img src="/imgs/image-20240227174405828.png" alt="image-20240227174405828" /></p><p>4.启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh run.sh</span><br></pre></td></tr></table></figure><h5 id="server3-2"><a class="markdownIt-Anchor" href="#server3-2"></a> server3</h5><p>服务器IP：192.168.26.75</p><p>1.进入到 <code>config</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd server3/config</span><br></pre></td></tr></table></figure><p>2.创建 <code>config.json</code> 配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">    &quot;bootstrap_expect&quot;: 3,</span><br><span class="line">    &quot;data_dir&quot;: &quot;/consul/data&quot;,</span><br><span class="line">    &quot;log_file&quot;: &quot;/consul/log/&quot;,</span><br><span class="line">    &quot;log_level&quot;: &quot;INFO&quot;,</span><br><span class="line">    &quot;node_name&quot;: &quot;consul_server_3&quot;,</span><br><span class="line">    &quot;client_addr&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server&quot;: true,</span><br><span class="line">    &quot;ui&quot;: true,</span><br><span class="line">    &quot;enable_script_checks&quot;: true,</span><br><span class="line">    &quot;addresses&quot;: &#123;</span><br><span class="line">        &quot;https&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">        &quot;dns&quot;: &quot;0.0.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.配置启动命令</p><p>在<code>server3</code> 目录下 创建启动脚本<code>run.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir run.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run -d --network=host --name=consul_server_3 -v $PWD/data:/consul/data -v $PWD/config:/consul/config -v $PWD/log:/consul/log -e CONSUL_BIND_INTERFACE=&#x27;ens192&#x27; consul agent -bind=192.168.26.75 -join=192.168.26.73 -config-dir=/consul/config/config.json</span><br></pre></td></tr></table></figure><p>参数说明</p><ul><li><code>-join=192.168.26.73</code>：将节点加入到<code>consul_server_1</code> IP上</li></ul><p><img src="/imgs/image-20240227174802437.png" alt="image-20240227174802437" /></p><p>4.启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh run.sh</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240227174946704.png" alt="image-20240227174946704" /></p><h5 id="节点自动加入集群"><a class="markdownIt-Anchor" href="#节点自动加入集群"></a> 节点自动加入集群</h5><p>1.分别编辑<code>sverer1</code>、<code>sverer2</code>、<code>sverer3</code> 的配置文件，加入<code>start_join</code> 和 <code>retry_join</code> 字段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config/config.json</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240229141458532.png" alt="image-20240229141458532" /></p><p><code>server2</code> 和 <code>server3</code> 同样配置。</p><p>2.重新加载配置文件，验证配置是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec consul_server_1 consul reload</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240229143001728.png" alt="image-20240229143001728" /></p><p>我测试的<code>consul_server_2</code> 是 <code>leader</code>，加入了配置，但是没有重启<code>leader</code>。我重启的是 <code>consul_server_1</code>，测试优雅退出 <code>consul_server_1</code>，然后再重启，发现自动加入到了节点；也测试 <code>consul_server_3</code> 不加配置，然后优雅退出 <code>consul_server_3</code> 再重启，发现 <code>consul_server_3</code> 也自动加入到了节点。（这是为什么呢，从测试的结果来看，只要一个节点加入配置即可）</p><h5 id="加入acl认证-3"><a class="markdownIt-Anchor" href="#加入acl认证-3"></a> 加入ACL认证</h5><p>方法一：配置<code>acl.hcl </code>，通过consul acl bootstrap 生成token，然后把生成的token当做 <code>master</code> 的token。</p><p>本文档不采用该方法，有兴趣的可以自行去了解。<a href="https://blog.csdn.net/li450126014/article/details/105951195?spm=1001.2101.3001.6650.5&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-5-105951195-blog-111150583.235%5Ev43%5Epc_blog_bottom_relevance_base4&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-5-105951195-blog-111150583.235%5Ev43%5Epc_blog_bottom_relevance_base4&amp;utm_relevant_index=10">参考文档</a> 中【增加ACL token权限配置】目录。</p><p>方法二：使用linux的 <code>uuidgen</code> 命令生成一个64位UUID作为 <code>master</code> token，写入<code>acl.hcl</code> 配置文件中</p><p>1.生成UUID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uuidgen</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17b0d7f6-cd24-4989-ad84-9e1e5c938ce8</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240229144313793.png" alt="image-20240229144313793" /></p><p>2.分别在<code>consul_server_1</code> 、 <code>consul_server_2</code> 、<code>consul_server_3</code> 的 <code>config</code>文件夹中 新增<code>acl.hcl</code> 配置文件，并将生成的token 加入文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config/acl.hcl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">primary_datacenter = &quot;dc1&quot;</span><br><span class="line">acl &#123;</span><br><span class="line">  enabled = true</span><br><span class="line">  default_policy = &quot;deny&quot;</span><br><span class="line">  enable_token_persistence = true</span><br><span class="line">  tokens &#123;</span><br><span class="line">    master = &quot;17b0d7f6-cd24-4989-ad84-9e1e5c938ce8&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>enabled = true</code>：代表开启ACL</li><li><code>default_policy=“deny”</code>：默认为allow，如果需要自定义权限，需要将其设置为deny</li><li><code>enable_token_persistence =true</code>： 开启token持久化，将token持久化到磁盘上</li></ul><p>3.重启 <code>consul_server_1</code> 、 <code>consul_server_2</code> 、<code>consul_server_3</code> 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker restart consul_server_1</span><br><span class="line"></span><br><span class="line">docker restart consul_server_2</span><br><span class="line"></span><br><span class="line">docker restart consul_server_3</span><br></pre></td></tr></table></figure><p>4.启动UI界面查看</p><p><img src="/imgs/image-20240229161256697.png" alt="image-20240229161256697" /></p><p>输入 <code>acl.hcl</code> 配置文件中的 <code>master</code> 的 token</p><p><img src="/imgs/image-20240229161313672.png" alt="image-20240229161313672" /></p><p><img src="/imgs/image-20240229161433696.png" alt="image-20240229161433696" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-consul-集群部署&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docker-consul-集群部署&quot;&gt;&lt;/a&gt; docker consul 集群部署&lt;/h2&gt;
&lt;p&gt;本文档演示的在一台服务器上部署节点=3的cons</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="consul" scheme="https://www.yanwq.com/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>docker consul 集群部署验证</title>
    <link href="https://www.yanwq.com/2024/03/20/docker%20consul%20%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E9%AA%8C%E8%AF%81/"/>
    <id>https://www.yanwq.com/2024/03/20/docker%20consul%20%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E9%AA%8C%E8%AF%81/</id>
    <published>2024-03-20T08:40:10.210Z</published>
    <updated>2024-03-20T08:40:10.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-consul-集群部署验证"><a class="markdownIt-Anchor" href="#docker-consul-集群部署验证"></a> docker consul 集群部署验证</h2><p>主要记录 docker consul 集群部署完成之后验证的文档。</p><h5 id="验证"><a class="markdownIt-Anchor" href="#验证"></a> 验证</h5><p>1.查看成员（consul_server_1服务器）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec consul_server_1 consul members</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240227180705420.png" alt="image-20240227180705420" /></p><p>2.查看集群的选举情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec consul_server_1 consul operator raft list-peers</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240227182112918.png" alt="image-20240227182112918" /></p><p>可以看到，目前的<code>leader</code> 是节点 <code>consul_server_1</code></p><p>3.通过网页打开<a href="http://192.168.26.73:8500/ui%E7%9C%8B%E6%98%AF%E5%90%A6%E8%83%BD%E7%9C%8B%E5%88%B0consul%E7%9C%8B%E6%9D%BF">http://192.168.26.73:8500/ui看是否能看到consul看板</a></p><h5 id="验证集群选举机制"><a class="markdownIt-Anchor" href="#验证集群选举机制"></a> 验证集群选举机制</h5><p>1.重启<code>leader（consul_server_1）</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart consul_server_1</span><br></pre></td></tr></table></figure><p>2.查看<code>consul_server_2</code> 和 <code>consul_server_3</code> 日志</p><p>consul_server_2:</p><p><img src="/imgs/image-20240227182239556.png" alt="image-20240227182239556" /></p><p>consul_server_3:</p><p><img src="/imgs/image-20240227182306232.png" alt="image-20240227182306232" /></p><p>3.查看集群的选举情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec consul_server_1 consul operator raft list-peers</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240227182647339.png" alt="image-20240227182647339" /></p><p>通过步骤2和3，可以看到节点<code>consul_server_2</code> 被选举为新的 <code>leader</code></p><p><strong>注：</strong></p><p>有一定几率，选举的<code>leader</code> 是重启后的节点（测试出现过，猜测是从日志上看重启的时候，其余正常的节点再尝试连接，返回了 <code>connect:connection refused </code> 报错，而且尝试连接不止一次，在尝试连接几次之后，发现连接不上，才开始选举，在选举的时候，重启完成了，可以参与选举，这里就不做深度研究，知道有几率出现这个情况即可）</p><h5 id="验证节点优雅退出"><a class="markdownIt-Anchor" href="#验证节点优雅退出"></a> 验证节点优雅退出</h5><p>1.<code>consul_server_1</code> 优雅退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec consul_server_1 consul leave</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240227185134358.png" alt="image-20240227185134358" /></p><p>优雅退出之后，查看服务状态是<code>Exited</code> 状态</p><p><img src="/imgs/image-20240227190237046.png" alt="image-20240227190237046" /></p><p>2.查看节点状态</p><p>在其余节点服务器上执行，用的是<code>consul_server_3</code> 节点（根据实际情况查看）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec consul_server_3 consul members</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240227185202210.png" alt="image-20240227185202210" /></p><p>3.查看<code>leader</code></p><p>当前<code>leader</code> 节点是<code>consul_server_2</code> （根据实际情况查看）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec consul_server_2 consul operator raft list-peers</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240227185408889.png" alt="image-20240227185408889" /></p><p>查看后台日志，没有报错，访问ui正常，说明配置文件的bootstrap_expect=3，只是在创建集群的时候期待的节点数量，如果达不到就不会初次创建集群，但节点数据量达到3后，集群初次创建成功，后面如果server通过优雅退出，不影响集群的健康情况，集群仍然会正常运行，而优雅退出的集群的状态会标志为“left”。</p><p>4.重启优雅退出的节点（consul_server_1）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart consul_server_1</span><br></pre></td></tr></table></figure><p>查看集群状态，发现<code>consul_server_1</code> 节点状态 还是<code>left</code>，尽管启动命令中加入了<code>join</code> 参数 （这个问题可以研究一下）</p><p><img src="/imgs/image-20240227190000659.png" alt="image-20240227190000659" /></p><p>手动加入节点</p><p><img src="/imgs/image-20240227190131242.png" alt="image-20240227190131242" /></p><p>再次查看集群状态</p><p><img src="/imgs/image-20240227190507029.png" alt="image-20240227190507029" /></p><p>发现<code>consul_server_1</code> 节点的状态为 <code>alive</code></p><h5 id="节点自动加入集群"><a class="markdownIt-Anchor" href="#节点自动加入集群"></a> 节点自动加入集群</h5><p>1.分别编辑<code>sverer1</code>、<code>sverer2</code>、<code>sverer3</code> 的配置文件，加入<code>start_join</code> 和 <code>retry_join</code> 字段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config/config.json</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240229141458532.png" alt="image-20240229141458532" /></p><p><code>server2</code> 和 <code>server3</code> 同样配置。</p><p>2.重新加载配置文件，验证配置是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec consul_server_1 consul reload</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240229143001728.png" alt="image-20240229143001728" /></p><p>我测试的<code>consul_server_2</code> 是 <code>leader</code>，加入了配置，但是没有重启<code>leader</code>。我重启的是 <code>consul_server_1</code>，测试优雅退出 <code>consul_server_1</code>，然后再重启，发现自动加入到了节点；也测试 <code>consul_server_3</code> 不加配置，然后优雅退出 <code>consul_server_3</code> 再重启，发现 <code>consul_server_3</code> 也自动加入到了节点。（这是为什么呢，从测试的结果来看，只要一个节点加入配置即可）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-consul-集群部署验证&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docker-consul-集群部署验证&quot;&gt;&lt;/a&gt; docker consul 集群部署验证&lt;/h2&gt;
&lt;p&gt;主要记录 docker consul</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="consul" scheme="https://www.yanwq.com/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>docker日志过大清理文档</title>
    <link href="https://www.yanwq.com/2024/03/20/docker%E6%97%A5%E5%BF%97%E8%BF%87%E5%A4%A7%E6%B8%85%E7%90%86%E9%97%AE%E9%A2%98/"/>
    <id>https://www.yanwq.com/2024/03/20/docker%E6%97%A5%E5%BF%97%E8%BF%87%E5%A4%A7%E6%B8%85%E7%90%86%E9%97%AE%E9%A2%98/</id>
    <published>2024-03-20T08:40:10.210Z</published>
    <updated>2024-03-20T08:40:10.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker日志过大清理文档"><a class="markdownIt-Anchor" href="#docker日志过大清理文档"></a> docker日志过大清理文档</h2><p>背景：docker服务使用时间久，docker会一直堆积日志。导致磁盘空间过小，这时候就需要清理服务日志。</p><hr /><h4 id="方案一"><a class="markdownIt-Anchor" href="#方案一"></a> 方案一：</h4><p>此方案没有测试过，建议使用方案2，方案2，测试过，没有问题</p><p>可能由于docker部署的时候，挂载根目录，而根目录磁盘空间不是很大，在日积月累的情况下，会出现docker 日志文件过大，从而导致磁盘空间不足。这时间就需要清理日志。</p><p>此方案就是通过配置docker 日志大小，来解决。例如：/var/lib/docker/containers/xxx/xxx-json.log 文件过大了</p><p>解决：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">在/<span class="keyword">var</span>/lib/docker/containers目录下的Docker容器日志文件的大小是由Docker守护进程中的日志驱动程序配置决定的。默认情况下，Docker使用的是json-file日志驱动程序。</span><br><span class="line"></span><br><span class="line">要配置这些日志文件的大小，可以在Docker守护进程的配置文件/etc/docker/daemon.json中添加日志驱动程序参数。以下是一种配置日志文件大小的方法：</span><br><span class="line"></span><br><span class="line">打开Docker守护进程的配置文件/etc/docker/daemon.json（如果文件不存在，则创建它）。</span><br><span class="line"></span><br><span class="line">在该文件中添加以下配置：</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;10m&quot;</span>,</span><br><span class="line">    <span class="string">&quot;max-file&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">这里使用的是json-file日志驱动程序，它将日志保存为JSON格式文件。</span><br><span class="line"></span><br><span class="line">max-size参数用于指定每个日志文件的最大大小，单位可以是B（字节），k（千字节），m（兆字节）或g（吉字节）。</span><br><span class="line"></span><br><span class="line">max-file参数用于指定保存的日志文件数量。</span><br><span class="line"></span><br><span class="line">在这个示例中，每个日志文件的最大大小为<span class="number">10</span>兆字节（<span class="number">10</span>m），系统会自动轮转日志，并保留最多<span class="number">3</span>个日志文件。</span><br><span class="line"></span><br><span class="line">保存并关闭文件。</span><br><span class="line"></span><br><span class="line">重启Docker守护进程，以使配置生效。可以使用以下命令重启Docker守护进程：</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">现在，/<span class="keyword">var</span>/lib/docker/containers目录下的Docker容器日志文件的大小已经被配置为每个文件最大为<span class="number">10</span>兆字节，最多保留<span class="number">3</span>个文件。请注意，这对于新的容器会生效，对于已经运行的容器需要进行其他操作以使其生效。</span><br></pre></td></tr></table></figure><h4 id="方案二"><a class="markdownIt-Anchor" href="#方案二"></a> 方案二</h4><p>通过清空docker 日志来达到效果</p><p>解决：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">直接删除/<span class="keyword">var</span>/lib/docker/containers目录下的日志文件可能会对正在运行的容器或已启动的服务产生不可预测的影响，因为容器的运行依赖于这些日志文件。虽然删除日志文件不会直接影响容器的运行，但会导致你无法查看容器的日志记录。</span><br><span class="line"></span><br><span class="line">如果你想删除这些日志文件，最好的做法是使用Docker提供的日志管理工具来处理：</span><br><span class="line"></span><br><span class="line">使用以下命令列出正在运行的容器：</span><br><span class="line">docker ps</span><br><span class="line">记录你要处理的容器的容器ID。</span><br><span class="line"></span><br><span class="line">使用以下命令来获取指定容器的日志文件路径：</span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;.LogPath&#125;&#125;&#x27;</span> &lt;容器ID&gt;</span><br><span class="line">替换&lt;容器ID&gt;为你要处理的容器的真实ID。</span><br><span class="line"></span><br><span class="line">使用命令echo <span class="string">&quot;&quot;</span> &gt; &lt;日志文件路径&gt;清空该日志文件，而不是直接删除它。例如：</span><br><span class="line">echo <span class="string">&quot;&quot;</span> &gt; /<span class="keyword">var</span>/lib/docker/containers/&lt;容器ID&gt;/&lt;容器ID&gt;-json.log</span><br><span class="line">替换&lt;日志文件路径&gt;为第<span class="number">2</span>步中获取的日志文件路径。</span><br><span class="line"></span><br><span class="line">这样，你就将日志文件清空了，而不会删除它们。容器将继续将日志写入这些文件，但现有的日志将被清空。</span><br><span class="line"></span><br><span class="line">请注意，如果你删除了整个/<span class="keyword">var</span>/lib/docker/containers目录，将会丢失所有容器的配置和数据，包括正在运行的容器。如果需要删除整个目录，最好通过停止和删除容器后删除整个目录，并确保有备份所有重要的容器配置和数据。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker日志过大清理文档&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docker日志过大清理文档&quot;&gt;&lt;/a&gt; docker日志过大清理文档&lt;/h2&gt;
&lt;p&gt;背景：docker服务使用时间久，docker会一直堆积日志。导致磁盘空</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="docker" scheme="https://www.yanwq.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker部署es数据库</title>
    <link href="https://www.yanwq.com/2024/03/20/docker%E9%83%A8%E7%BD%B2es%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://www.yanwq.com/2024/03/20/docker%E9%83%A8%E7%BD%B2es%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2024-03-20T08:40:10.210Z</published>
    <updated>2024-03-20T08:40:10.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker部署es数据库"><a class="markdownIt-Anchor" href="#docker部署es数据库"></a> docker部署es数据库</h2><p>1.获取镜像</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:<span class="number">7.14</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>2.创建相关文件夹</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mnt/d/java/share/elasticsearch/config</span><br><span class="line">mkdir -p /mnt/d/java/share/elasticsearch/data</span><br><span class="line">mkdir -p /mnt/d/java/share/elasticsearch/plugins</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20230109160331272.png" alt="image-20230109160331272" /></p><p>3.配置文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;http.host: 0.0.0.0&quot;</span> &gt;&gt; /mnt/d/java/share/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure><p>配置完成，可以执行命令查看</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mnt/d/java/share/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure><p>4.创建容器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --name elasticsearch -p <span class="number">9200</span>:<span class="number">9200</span> -p <span class="number">9300</span>:<span class="number">9300</span> \</span><br><span class="line">&gt; -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">&gt; -e ES_JAVA_OPTS=<span class="string">&quot;-Xms84m -Xmx512m&quot;</span> \</span><br><span class="line">&gt; -v /mnt/d/java/share/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">&gt; -v /mnt/d/java/share/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">&gt; -v /mnt/d/java/share/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">&gt; -d elasticsearch:<span class="number">7.14</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20230109160537007.png" alt="image-20230109160537007" /></p><p>5.测试正常移动页面</p><p><img src="/imgs/image-20230109160747537.png" alt="image-20230109160747537" /></p><p><a href="https://blog.csdn.net/qq_44732146/article/details/120744829?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-5-120744829-blog-124889752.pc_relevant_recovery_v2&amp;spm=1001.2101.3001.4242.4&amp;utm_relevant_index=8">参考文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker部署es数据库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docker部署es数据库&quot;&gt;&lt;/a&gt; docker部署es数据库&lt;/h2&gt;
&lt;p&gt;1.获取镜像&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="es" scheme="https://www.yanwq.com/tags/es/"/>
    
  </entry>
  
  <entry>
    <title>docker部署loki+promtail</title>
    <link href="https://www.yanwq.com/2024/03/20/docker%20%E9%83%A8%E7%BD%B2loki+promtail/"/>
    <id>https://www.yanwq.com/2024/03/20/docker%20%E9%83%A8%E7%BD%B2loki+promtail/</id>
    <published>2024-03-20T08:40:10.210Z</published>
    <updated>2024-03-20T08:40:10.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker部署lokipromtail"><a class="markdownIt-Anchor" href="#docker部署lokipromtail"></a> docker部署loki+promtail</h2><h4 id="loki"><a class="markdownIt-Anchor" href="#loki"></a> loki</h4><p>1.拉取镜像</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull grafana/loki:<span class="number">2.1</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>注：本文档适用2.1.0，不适合2.7.3版本，启动服务的时候会报wal错误</p><p>2.新建配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/loki     #创建loki文件夹</span><br><span class="line">mkdir -p /home/loki/index  #创建index文件夹 </span><br><span class="line">mkdir -p /home/loki/chunks #创建chunks文件夹</span><br><span class="line">chmod -R 777 /home/loki/index  #提权</span><br><span class="line">chmod -R 777 /home/loki/chunks  #提权</span><br><span class="line">cd /home/loki</span><br><span class="line">touch loki-config.yaml //创建loki-config配置文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.打开配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">vim loki-config.yaml</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line">auth_enabled: false   #是否启用身份验证，如果设置true。需要提供有效的用户名和密码才能访问loki</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  http_listen_port: 3100  #定义loki实例监听的地址和端口</span><br><span class="line">  grpc_listen_port: 3110  #定义loki grpc监听的地址和端口</span><br><span class="line">  grpc_server_max_recv_msg_size: 1073741824  #grpc最大接收消息值，默认4m</span><br><span class="line">  grpc_server_max_send_msg_size: 1073741824  #grpc最大发送消息值，默认4m</span><br><span class="line"></span><br><span class="line">ingester:</span><br><span class="line">  lifecycler:</span><br><span class="line">    address: 127.0.0.1  </span><br><span class="line">    ring:</span><br><span class="line">      kvstore:</span><br><span class="line">        store: inmemory</span><br><span class="line">      replication_factor: 1</span><br><span class="line">    final_sleep: 0s</span><br><span class="line">  chunk_idle_period: 5m</span><br><span class="line">  chunk_retain_period: 30s</span><br><span class="line">  max_transfer_retries: 0</span><br><span class="line">  max_chunk_age: 20m  #一个timeseries块在内存中的最大持续时间。如果timeseries运行的时间超过此时间，则当前块将刷新到存储并创建一个新块</span><br><span class="line"></span><br><span class="line">schema_config:</span><br><span class="line">  configs:</span><br><span class="line">    - from: 2021-01-01</span><br><span class="line">      store: boltdb</span><br><span class="line">      object_store: filesystem</span><br><span class="line">      schema: v11</span><br><span class="line">      index:</span><br><span class="line">        prefix: index_</span><br><span class="line">        period: 168h</span><br><span class="line"></span><br><span class="line">storage_config:</span><br><span class="line">  boltdb:</span><br><span class="line">    directory: /home/loki/index #存储索引地址</span><br><span class="line">  filesystem:</span><br><span class="line">    directory: /home/loki/chunks</span><br><span class="line"></span><br><span class="line">limits_config:</span><br><span class="line">  enforce_metric_name: false</span><br><span class="line">  reject_old_samples: true</span><br><span class="line">  reject_old_samples_max_age: 168h</span><br><span class="line">  ingestion_rate_mb: 30  #修改每用户摄入速率限制，即每秒样本量，默认值为4M</span><br><span class="line">  ingestion_burst_size_mb: 15  #修改每用户摄入速率限制，即每秒样本量，默认值为6M</span><br><span class="line"></span><br><span class="line">chunk_store_config:</span><br><span class="line">        #max_look_back_period: 168h   #回看日志行的最大时间，只适用于即时日志</span><br><span class="line">        max_look_back_period: 0s</span><br><span class="line"></span><br><span class="line">table_manager:</span><br><span class="line">  retention_deletes_enabled: false #日志保留周期开关，默认为false</span><br><span class="line">  retention_period: 0s  #日志保留周期</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart always -p 3100:3100  --privileged=true --name loki -v /home/loki:/mnt/config -v /home/loki/index:/opt/loki/index -v /home/loki/chunks:/opt/loki/chunks grafana/loki:2.0.1 -config.file=/mnt/config/loki-config.yaml</span><br><span class="line"></span><br><span class="line">复用修改宿主机挂载的路径即可</span><br></pre></td></tr></table></figure><p>5.验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:3100/api/prom/label</span><br><span class="line">curl localhost:3100/loki/api/v1/labels</span><br><span class="line"></span><br><span class="line">注：第一个curl如果返回&#123;&#125;或者空，则失败，查看配置文件或者查看日志排查原因</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20230707155443566.png" alt="image-20230707155443566" /></p><h4 id="promtail"><a class="markdownIt-Anchor" href="#promtail"></a> promtail</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promtail 是日志收集器，用于将日志发送到loki进行存储和分析。promtail 可以以代理的方式运行在应用程序所在的主机上，通过监控日志文件或者通过日志文件的标准输出来收集日志信息。</span><br><span class="line"></span><br><span class="line">Promtail将收集到的日志数据结构化为Loki所需的格式，并将其发送到Loki实例中。Loki则负责对日志进行存储，并提供查询和浏览日志的功能。</span><br></pre></td></tr></table></figure><p>根据上面的定义，promtail一般部署在应用程序所在服务器上。此文档拿tts-svc-dev应用程序来当例子，收集tts-svc-dev的日志发送给loki。所以promtail部署在tts-svc-dev服务器上（192.168.26.74:3200）</p><p>1.拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull grafana/promtail:2.1.0</span><br></pre></td></tr></table></figure><p>2.创建文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/kst/aihc/promtail</span><br><span class="line">cd /home/kst/aihc/promtail</span><br><span class="line">touch promtail-config.yaml</span><br></pre></td></tr></table></figure><p>3.打开配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vim promtail-config.yaml</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">server:</span><br><span class="line">  http_listen_port: 9080 #云服务器需开放9080端口</span><br><span class="line">  grpc_listen_port: 0</span><br><span class="line"></span><br><span class="line">positions:</span><br><span class="line">  filename: /tmp/positions.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">把loki当客户端连接</span></span><br><span class="line">clients:</span><br><span class="line">  - url: http://192.168.2.50:3100/loki/api/v1/push #这里修改实际loki的ip：port</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: tts-svc-dev  #标签，用于查询</span><br><span class="line">    #pipeline_stages:</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">       - localhost</span><br><span class="line">      labels:</span><br><span class="line">       #标签，用于后面的查询 </span><br><span class="line">       job: tts-svc-dev</span><br><span class="line">       __path__: /var/log/tts-svc-dev/*.log #注意，这里的路径是映射主机的/data/aihc/tts-svc/dev/log目录的容器里的目录，指的是容器里面映射的路径</span><br></pre></td></tr></table></figure><p>4.启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name promtail --privileged=true -p 9080:9080 -m 1024m -v /home/kst/aihc/promtail:/mnt/config -v /data/aihc/tts-svc/dev/log:/var/log/tts-svc-dev/ -v /etc/localtime:/etc/localtime:ro grafana/promtail:2.1.0 -config.file=/mnt/config/promtail-config.yaml</span><br><span class="line"></span><br><span class="line">注： 这里需要把宿主机tts-svc日志存储路径挂载进容器里面， 对应配置文件的_path_参数</span><br></pre></td></tr></table></figure><p>5.验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://192.168.2.50:3100/api/prom/label&quot;  #实际loki的ip:port</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20230707154011354.png" alt="image-20230707154011354" /></p><p>6.接下来就可以访问grafana查看了</p><h4 id="grafana界面配置"><a class="markdownIt-Anchor" href="#grafana界面配置"></a> grafana界面配置</h4><p>1.打开grafana访问路径,此文档部署grafana路径是192.168.2.50:3100</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">网页打开 http://192.168.2.50:3100</span><br><span class="line">初始化账户和密码为:admin admin</span><br><span class="line">登录之后会跳出修改密码界面，点击【spik】可以跳过</span><br></pre></td></tr></table></figure><p>2.添加loki</p><p><img src="/imgs/image-20230707155839036.png" alt="image-20230707155839036" /></p><p><img src="/imgs/image-20230707160032533.png" alt="image-20230707160032533" /></p><p><img src="/imgs/image-20230707160046360.png" alt="image-20230707160046360" /></p><p><img src="/imgs/image-20230707160144473.png" alt="image-20230707160144473" /></p><p>然后拉到下面，点击【Save &amp; Test】，即添加成功</p><p>3.使用loki</p><p><img src="/imgs/image-20230707160249769.png" alt="image-20230707160249769" /></p><p><img src="/imgs/image-20230707160316228.png" alt="image-20230707160316228" /></p><p>可以看到有我们刚才配置的Job_name，点击【tts-svc-dev】</p><p><img src="/imgs/image-20230707160353065.png" alt="image-20230707160353065" /></p><p>成功查看日志</p><p>4.操作日志</p><p>可以点击【Add query】，输入需要查询的，查出指定日志。查询方式可百度</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker部署lokipromtail&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docker部署lokipromtail&quot;&gt;&lt;/a&gt; docker部署loki+promtail&lt;/h2&gt;
&lt;h4 id=&quot;loki&quot;&gt;&lt;a cla</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="grafana" scheme="https://www.yanwq.com/tags/grafana/"/>
    
  </entry>
  
  <entry>
    <title>docker 操作oracle数据库文档</title>
    <link href="https://www.yanwq.com/2024/03/20/docker%E6%93%8D%E4%BD%9Coracle%E5%AF%BC%E5%85%A5%E5%AF%BC%E6%B5%81%E7%A8%8B/"/>
    <id>https://www.yanwq.com/2024/03/20/docker%E6%93%8D%E4%BD%9Coracle%E5%AF%BC%E5%85%A5%E5%AF%BC%E6%B5%81%E7%A8%8B/</id>
    <published>2024-03-20T08:40:10.210Z</published>
    <updated>2024-03-20T08:40:10.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-操作oracle数据库文档"><a class="markdownIt-Anchor" href="#docker-操作oracle数据库文档"></a> docker 操作oracle数据库文档</h2><p>说明：本文档主要是记录docker部署oracle，操作数据库文档，docker 部署oracle可以参考<a href="https://blog.csdn.net/junle_carpediem/article/details/123430144">docker部署oracle</a></p><p>docker部署完oracle数据库后</p><p>1.通过指令来查看oarcle进程名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>2.找到oracle进程服务，通过指令进入oracle容器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 进程名 bash</span><br></pre></td></tr></table></figure><p>3.切换root用户，输入密码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line"></span><br><span class="line">再跳出Password：时，输入密码：helowin</span><br></pre></td></tr></table></figure><p>4.切换oracle用户，无需输入密码 ,</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure><p>或者3.不执行， 直接执行4，输入密码进入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br><span class="line">Password: oracle</span><br></pre></td></tr></table></figure><p>5.登录sqlplus软连接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus /nolog</span><br></pre></td></tr></table></figure><p>6.显示当前用户</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show user;</span><br><span class="line"></span><br><span class="line">结果为：</span><br><span class="line">USER is <span class="string">&quot;&quot;</span>  <span class="comment">//说明当前没有登录用户</span></span><br></pre></td></tr></table></figure><p>7.切换用户 【如果没有创建用户，可以参考下面三.创建用户流程,以用户 yanwq为例。   部署oracle完，oracle内部有2个建好的用户：system和sys, 用户可直接登录到system用户以创建其他用户，因为system具有创建别 的用户的 权限。 在安装oracle时，用户或系统管理员首先可以为自己建立一个用户。】</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conn yanwq/<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">结果为：</span><br><span class="line">Connected. <span class="comment">//用户连接成功</span></span><br></pre></td></tr></table></figure><p>8.输入sql语句，查看表数据，这边以voice表为例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * from voice;</span><br></pre></td></tr></table></figure><p>9.directories是oracle类似虚拟目录的一个概念，它对应服务器上的一个具体路径。可以使用命令查看现有的directory也可以直接创建新的，建议创建新的，比较简单</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/查询现有的directory</span><br><span class="line"><span class="keyword">select</span> * from dba_directories;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/创建一个新的directories</span><br><span class="line">create or replace directory yanwq_bak as <span class="string">&#x27;/home/oracle/app&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果为：</span><br><span class="line">Directory created.</span><br><span class="line"></span><br><span class="line">说明：创建一个directories =yanwq_bak的在/home/oracle/app下 ，可以修改路径和yanwq_bak</span><br></pre></td></tr></table></figure><p>9.退出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>10.执行命令导出数据和日志</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">expdp yanwq/<span class="number">123456</span> directory=yanwq_bak dumpfile=yanwq.dmp logfile=yanwq.log</span><br><span class="line"></span><br><span class="line">说明:使用yanwq用户连接数据库，并导出yanwq用户的数据，这样就会将dmp和log文件存放在服务器上的/home/oracle/app目录下</span><br></pre></td></tr></table></figure><p>11.执行一下命令进入app目录下，验证是否有生成yanwq.dmp和yanwq.log文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/oracle/app</span><br></pre></td></tr></table></figure><p>12.导入数据,  导入之前建议先将表删除，因为oracle数据是归属于用户的，所以我们一般是先将用户删除掉之后，重建，再执行impdp命令进行导入数据。</p><p>【进过测试只清理掉表数据，无法导入，会提示tableName exists.会跳过导入这个表的操作，删除表是可以导入的】</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impdp yanwq/<span class="number">123456</span> directory=yanwq_bak dumpfile=yanwq.dmp logfile=yanwq.log</span><br></pre></td></tr></table></figure><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他：</h4><p>一、创建用户</p><p>oracle内部有两个建好的用户：system和sys。用户可直接登录到system用户以创建其他用户，因为system具有创建别 的用户的 权限。 在安装oracle时，用户或系统管理员首先可以为自己建立一个用户。</p><p>语法[创建用户]： create user 用户名 identified by 口令[即密码]；</p><p>例子： create user test identified by test;</p><p>语法[更改用户]: alter user 用户名 identified by 口令[改变的口令];</p><p>例子： alter user test identified by 123456;</p><p>二、删除用户</p><p>语法：drop user 用户名;</p><p>例子：drop user test;</p><p>若用户拥有对象，则不能直接删除，否则将返回一个错误值。指定关键字cascade,可删除用户所有的对象，然后再删除用户。</p><p>语法： drop user 用户名 cascade;</p><p>例子： drop user test cascade;</p><p>三.创建用户流程,以用户 yanwq为例</p><p>进入容器之后，进入Oracle：sqlplus /nolog<br />使用sysdba登录oracle：conn sys/oracle as sysdba<br />创建用户：create user yanwq identified by 123456<br />赋予用户权限：grant dba to yanwq<br />登录：grant create session to yanwq<br />conn yanwq /123456</p><p>四.删除表数据</p><p>TRUNCATE TABLE voice;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-操作oracle数据库文档&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docker-操作oracle数据库文档&quot;&gt;&lt;/a&gt; docker 操作oracle数据库文档&lt;/h2&gt;
&lt;p&gt;说明：本文档主要是记录docker部</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="oracle" scheme="https://www.yanwq.com/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>docker 部署grafana</title>
    <link href="https://www.yanwq.com/2024/03/20/docker%E9%83%A8%E7%BD%B2grafana/"/>
    <id>https://www.yanwq.com/2024/03/20/docker%E9%83%A8%E7%BD%B2grafana/</id>
    <published>2024-03-20T08:40:10.210Z</published>
    <updated>2024-03-20T08:40:10.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-部署grafana"><a class="markdownIt-Anchor" href="#docker-部署grafana"></a> docker 部署grafana</h2><p>1.拉取镜像</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull grafana/grafana:<span class="number">7.4</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><p>2.启动容器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart always -p <span class="number">3000</span>:<span class="number">3000</span> --name grafana grafana/grafana:<span class="number">7.4</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><p>3.网页访问，进入可视化界面</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">部署服务器ip:<span class="number">3000</span></span><br><span class="line"></span><br><span class="line">输入用户名密码 admin/admin，进入会改密码</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-部署grafana&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docker-部署grafana&quot;&gt;&lt;/a&gt; docker 部署grafana&lt;/h2&gt;
&lt;p&gt;1.拉取镜像&lt;/p&gt;
&lt;figure class=&quot;high</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="grafana" scheme="https://www.yanwq.com/tags/grafana/"/>
    
  </entry>
  
  <entry>
    <title>windows10 安装和使用 ssh</title>
    <link href="https://www.yanwq.com/2024/03/20/windows%E5%AE%89%E8%A3%85ssh/"/>
    <id>https://www.yanwq.com/2024/03/20/windows%E5%AE%89%E8%A3%85ssh/</id>
    <published>2024-03-20T07:59:22.484Z</published>
    <updated>2024-03-20T08:50:52.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows10-安装和使用-ssh"><a class="markdownIt-Anchor" href="#windows10-安装和使用-ssh"></a> windows10 安装和使用 ssh</h2><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><p>1.下载文件</p><p>下载地址：<a href="https://github.com/PowerShell/Win32-OpenSSH/releases">https://github.com/PowerShell/Win32-OpenSSH/releases</a>  本人电脑64位</p><p><img src="/imgs/image-20240320161041186.png" alt="image-20240320161041186" /></p><p>2.安装</p><p>将这个下载好的压缩包，解压到C:\Program Files目录下</p><p><img src="/imgs/image-20240320161153808.png" alt="image-20240320161153808" /></p><p>3.配置到系统环境变量中</p><p><img src="/imgs/image-20240320161257662.png" alt="image-20240320161257662" /></p><p>4.进入到 C盘 -&gt; Users -&gt;对应的用户中 执行cmd运行ssh测试</p><p><img src="/imgs/image-20240320161630214.png" alt="image-20240320161630214" /></p><hr /><h4 id="生成ssh-key"><a class="markdownIt-Anchor" href="#生成ssh-key"></a> 生成SSH key</h4><ol><li>cmd中执行命令生成密钥</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240320162116918.png" alt="image-20240320162116918" /></p><p>出现这个图说明生成成功</p><p>2.进入C盘 -&gt; Users -&gt; 对应用户中查看,会生成一个 <code>.ssh</code> 文件夹</p><p><img src="/imgs/image-20240320162225264.png" alt="image-20240320162225264" /></p><p>3.读取公钥并添加到github中</p><p><img src="/imgs/image-20240320162410847.png" alt="image-20240320162410847" /></p><p>4.登录到 <code>github.com</code> 中 添加ssh key</p><p><img src="/imgs/image-20240320162918218.png" alt="image-20240320162918218" /></p><p><img src="/imgs/image-20240320163038687.png" alt="image-20240320163038687" /></p><p>5.对此从指定github上拉取项目就不需要验证了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windows10-安装和使用-ssh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#windows10-安装和使用-ssh&quot;&gt;&lt;/a&gt; windows10 安装和使用 ssh&lt;/h2&gt;
&lt;h4 id=&quot;安装&quot;&gt;&lt;a class=&quot;ma</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.yanwq.com/categories/Windows/"/>
    
    
    <category term="node" scheme="https://www.yanwq.com/tags/node/"/>
    
  </entry>
  
</feed>
