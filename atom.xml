<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yanwq</title>
  
  <subtitle>blog</subtitle>
  <link href="https://www.yanwq.com/atom.xml" rel="self"/>
  
  <link href="https://www.yanwq.com/"/>
  <updated>2024-12-17T06:23:46.339Z</updated>
  <id>https://www.yanwq.com/</id>
  
  <author>
    <name>yanwq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis哨兵部署</title>
    <link href="https://www.yanwq.com/2024/12/17/kvpl-redis%E4%B8%80%E4%B8%BB%E4%B8%89%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/"/>
    <id>https://www.yanwq.com/2024/12/17/kvpl-redis%E4%B8%80%E4%B8%BB%E4%B8%89%E4%BB%8E%E4%B8%89%E5%93%A8%E5%85%B5%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/</id>
    <published>2024-12-17T06:09:08.160Z</published>
    <updated>2024-12-17T06:23:46.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="各redis的ip和端口如下"><a class="markdownIt-Anchor" href="#各redis的ip和端口如下"></a> 各redis的ip和端口如下：</h3><p>主(redis-mater)：192.168.26.75:16379</p><p>从(redis-slaveof)：192.168.26.73:6380</p><p>三哨兵：(sentinel-26379)：192.168.73:26379</p><p>​(sentinel-26380)：192.168.74:26380</p><p>​(sentinel-26381)：192.168.75:26381</p><h3 id="docker部署流程"><a class="markdownIt-Anchor" href="#docker部署流程"></a> docker部署流程：</h3><h4 id="下载redis镜像"><a class="markdownIt-Anchor" href="#下载redis镜像"></a> 下载redis镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0.9</span><br></pre></td></tr></table></figure><h4 id="创建主data文件夹"><a class="markdownIt-Anchor" href="#创建主data文件夹"></a> 创建主data文件夹</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/yanwq/docker_data/redis/redis_data/data</span><br></pre></td></tr></table></figure><h4 id="docker运行主redis"><a class="markdownIt-Anchor" href="#docker运行主redis"></a> docker运行主redis</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name redis-master --net=host -v /home/yanwq/docker_data/redis/redis_data1/data:/data -d redis:5.0.9 redis-server --port 16379</span><br></pre></td></tr></table></figure><h4 id="创建从data1文件夹"><a class="markdownIt-Anchor" href="#创建从data1文件夹"></a> 创建从data1文件夹</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/yanwq/docker_data/redis/redis_data1/data</span><br></pre></td></tr></table></figure><h4 id="docker运行从redis"><a class="markdownIt-Anchor" href="#docker运行从redis"></a> docker运行从redis</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name redis-slaveof --net=host -v /home/yanwq/docker_data/redis/redis_data1/data:/data -d redis:5.0.9 redis-server --slaveof 192.168.26.75 16379 --port 6380</span><br></pre></td></tr></table></figure><h4 id="查看集群是否成功"><a class="markdownIt-Anchor" href="#查看集群是否成功"></a> 查看集群是否成功</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker exec –it redis-master bash</span><br><span class="line">redis-cli -p 16379</span><br><span class="line">info replication</span><br><span class="line"></span><br><span class="line">//范例结果</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=192.168.26.73,port=6380,state=online,offset=43329,lag=1</span><br><span class="line">master_replid:62e00c7324e572561d197106981439b3741ab908</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:43613</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:43613</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20241217140514682.png" alt="image-20241217140514682" /></p><h4 id="创建哨兵配置"><a class="markdownIt-Anchor" href="#创建哨兵配置"></a> 创建哨兵配置</h4><h5 id="sentinel-26379"><a class="markdownIt-Anchor" href="#sentinel-26379"></a> sentinel-26379</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/yanwq/docker_data/redis/sentinel/sentinel1</span><br><span class="line">mkdir sentinel-26379.conf</span><br></pre></td></tr></table></figure><h5 id="cd-sentinel-26379conf-配置内容如下"><a class="markdownIt-Anchor" href="#cd-sentinel-26379conf-配置内容如下"></a> cd sentinel-263.79.conf 配置内容如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">port 26379</span><br><span class="line">daemonize no</span><br><span class="line">sentinel monitor mymaster 192.168.26.75 16379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20241217140713740.png" alt="image-20241217140713740" /></p><h5 id="sentinel-26380"><a class="markdownIt-Anchor" href="#sentinel-26380"></a> sentinel-26380</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/yanwq/docker_data/redis/sentinel/sentinel2</span><br><span class="line">mkdir sentinel-26380.conf</span><br></pre></td></tr></table></figure><h5 id="cd-sentinel-26380conf-配置内容如下"><a class="markdownIt-Anchor" href="#cd-sentinel-26380conf-配置内容如下"></a> cd sentinel-263.80.conf 配置内容如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">port 26380</span><br><span class="line">daemonize no</span><br><span class="line">sentinel monitor mymaster 192.168.26.75 16379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20241217140741040.png" alt="image-20241217140741040" /></p><h5 id="sentinel-26381"><a class="markdownIt-Anchor" href="#sentinel-26381"></a> sentinel-26381</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/yanwq/docker_data/redis/sentinel/sentinel3</span><br><span class="line">mkdir sentinel-26381.conf</span><br></pre></td></tr></table></figure><h5 id="cd-sentinel-26381conf-配置内容如下"><a class="markdownIt-Anchor" href="#cd-sentinel-26381conf-配置内容如下"></a> cd sentinel-263.81.conf 配置内容如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">port 26379</span><br><span class="line">daemonize no</span><br><span class="line">sentinel monitor mymaster 192.168.26.75 16379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20241217140801380.png" alt="image-20241217140801380" /></p><h4 id="docker运行哨兵"><a class="markdownIt-Anchor" href="#docker运行哨兵"></a> docker运行哨兵</h4><h5 id="哨兵sentinel-26379"><a class="markdownIt-Anchor" href="#哨兵sentinel-26379"></a> 哨兵sentinel-26379</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name sentinel-26379 --net=host -v /home/yanwq/docker_data/redis/sentinel/sentinel1/sentinel-26379.conf:/usr/local/etc/redis/sentinel-26379.conf -d redis:5.0.9 redis-sentinel /usr/local/etc/redis/sentinel-26379.conf </span><br></pre></td></tr></table></figure><h5 id="查看日志"><a class="markdownIt-Anchor" href="#查看日志"></a> 查看日志</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f sentinel-26379</span><br></pre></td></tr></table></figure><h5 id="哨兵sentinel-26380"><a class="markdownIt-Anchor" href="#哨兵sentinel-26380"></a> 哨兵sentinel-26380</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name sentinel-26380 --net=host -v /home/yanwq/docker_data/redis/sentinel/sentinel2/sentinel-26380.conf:/usr/local/etc/redis/sentinel-26380.conf -d redis:5.0.9 redis-sentinel /usr/local/etc/redis/sentinel-26380.conf </span><br></pre></td></tr></table></figure><h5 id="查看日志-2"><a class="markdownIt-Anchor" href="#查看日志-2"></a> 查看日志</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f sentinel-26380</span><br></pre></td></tr></table></figure><h5 id="哨兵sentinel-26381"><a class="markdownIt-Anchor" href="#哨兵sentinel-26381"></a> 哨兵sentinel-26381</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name sentinel-26381 --net=host -v /home/yanwq/docker_data/redis/sentinel/sentinel3/sentinel-26381.conf:/usr/local/etc/redis/sentinel-26381.conf -d redis:5.0.9 redis-sentinel /usr/local/etc/redis/sentinel-26381.conf</span><br></pre></td></tr></table></figure><h5 id="查看日志-3"><a class="markdownIt-Anchor" href="#查看日志-3"></a> 查看日志</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f sentinel-26381</span><br></pre></td></tr></table></figure><h4 id="查看集群哨兵是否成功"><a class="markdownIt-Anchor" href="#查看集群哨兵是否成功"></a> 查看集群+哨兵是否成功</h4><h5 id="进入主redis中执行"><a class="markdownIt-Anchor" href="#进入主redis中执行"></a> 进入主redis中执行</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis-master bash</span><br><span class="line">redis-cli -p 16379</span><br><span class="line">keys *// (empty list or set)</span><br><span class="line">set user1 user1   //OK</span><br><span class="line">get user1      //&quot;usre1&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20241217140829467.png" alt="image-20241217140829467" /></p><h5 id="进入从redis中查看"><a class="markdownIt-Anchor" href="#进入从redis中查看"></a> 进入从redis中查看</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis-slaveof bash</span><br><span class="line">redis-cli -p 6380</span><br><span class="line">get user1//&quot;user1&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20241217140839081.png" alt="image-20241217140839081" /></p><h5 id="停掉主redis服务打开3个会话查看哨兵日志"><a class="markdownIt-Anchor" href="#停掉主redis服务打开3个会话查看哨兵日志"></a> 停掉主redis服务,打开3个会话查看哨兵日志</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop redis-master</span><br><span class="line">docker logs -f sentinel-26379</span><br><span class="line">docker logs -f sentinel-26380</span><br><span class="line">docker logs -f sentinel-26381</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20241217140846971.png" alt="image-20241217140846971" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;各redis的ip和端口如下&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#各redis的ip和端口如下&quot;&gt;&lt;/a&gt; 各redis的ip和端口如下：&lt;/h3&gt;
&lt;p&gt;主(redis-mater)：192.168.26.75:16379&lt;</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="redis" scheme="https://www.yanwq.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>国产化服务改造文档（arm64）</title>
    <link href="https://www.yanwq.com/2024/12/17/%E5%9B%BD%E4%BA%A7%E5%8C%96%E6%9C%8D%E5%8A%A1%E6%94%B9%E9%80%A0%E6%96%87%E6%A1%A3/"/>
    <id>https://www.yanwq.com/2024/12/17/%E5%9B%BD%E4%BA%A7%E5%8C%96%E6%9C%8D%E5%8A%A1%E6%94%B9%E9%80%A0%E6%96%87%E6%A1%A3/</id>
    <published>2024-12-17T06:01:35.525Z</published>
    <updated>2024-12-17T06:24:43.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="国产化服务改造文档"><a class="markdownIt-Anchor" href="#国产化服务改造文档"></a> 国产化服务改造文档</h2><p>说明：使用的服务器是[Linux xinfang.kunpeng 4.18.0-193.28.1.el7.aarch64 #1 SMP Wed Oct 21 16:25:35 UTC 2020 aarch64 aarch64 aarch64 GNU/Linux]可在服务器上执行【lscpu查看】</p><p>目录</p><ol><li>docker-23.0.1</li><li>consul-1.15.0</li><li>redis</li></ol><h4 id="docker"><a class="markdownIt-Anchor" href="#docker"></a> docker</h4><p>1.到官网选择对应系统，对应版本的安装包下载(此文档记录的是下载aarch64系统23.0.1版本的docker)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//download.docker.com/linux/static/stable</span></span><br></pre></td></tr></table></figure><p>2.将下载好的[docker-23.0.1.tgz镜像]放入服务上</p><p><img src="/imgs/image-20230303150655645.png" alt="image-20230303150655645" /></p><p>3.执行install_docker.sh脚本进行安装docker</p><p>install_docker.sh脚本内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">tar -zxvf docker-23.0.1.tgz</span><br><span class="line">chmod +x docker/*</span><br><span class="line">cp docker/* /usr/local/bin</span><br><span class="line"></span><br><span class="line">mkdir -p /usr/lib/systemd/system</span><br><span class="line"></span><br><span class="line">cat &gt; /usr/lib/systemd/system/docker.service &lt;&lt;&quot;EOF&quot;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=http://docs.docker.io</span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;PATH=/usr/local/bin:/bin:/sbin:/usr/bin:/usr/sbin&quot;</span><br><span class="line">EnvironmentFile=-/run/flannel/docker</span><br><span class="line">ExecStart=/usr/local/bin/dockerd --log-level=error $DOCKER_NETWORK_OPTIONS</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20230303150613869.png" alt="image-20230303150613869" /></p><p>4.执行docker ps 查看docker是否安装成功</p><p><img src="/imgs/image-20230303150622865.png" alt="image-20230303150622865" /></p><h4 id="consul"><a class="markdownIt-Anchor" href="#consul"></a> consul</h4><p>1.到docker 镜像仓库找到arm64系统的镜像</p><p><img src="/imgs/image-20230303150915920.png" alt="image-20230303150915920" /></p><p>2.执行docker images 查看镜像是否存在</p><p><img src="/imgs/image-20230303150941727.png" alt="image-20230303150941727" /></p><p>3.将镜像保存到本地</p><p><img src="/imgs/image-20230303151007054.png" alt="image-20230303151007054" /></p><p>4.将保存的consul.img镜像放到服务器上</p><p>5.执行命令启动镜像</p><p><img src="/imgs/image-20230303151130453.png" alt="image-20230303151130453" /></p><p>6.执行启动命令启动服务(单点)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8500:8500/tcp --restart always--name=consul consul:1.15.0 agent -server -ui -bootstrap-expect=1 -client=0.0.0.0</span><br></pre></td></tr></table></figure><p>部署集群</p><p><a href="https://blog.csdn.net/qq_49723651/article/details/123134918">参考文章</a></p><h4 id="nohup"><a class="markdownIt-Anchor" href="#nohup"></a> nohup</h4><p>1.先下载nohup</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install coreutils</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20230309105047100.png" alt="image-20230309105047100" /></p><p>2.查看下载的nohup</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /user/bin</span><br><span class="line">which nohup</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20230309105132309.png" alt="image-20230309105132309" /></p><p>3.配置nohup路径，全局使用</p><ol><li>打开编辑文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><ol start="2"><li><code>PATH= $ PATH:$ HOME/bin</code> 再后面加上 <code>:/usr/bin</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:/usr/bin</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20230309105312930.png" alt="" /></p><ol start="3"><li>刷新配置变量，让nohup配置立即生效</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>4.测试nohup</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup --version</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20230309105722651.png" alt="image-20230309105722651" /></p><h4 id="kvp-afp"><a class="markdownIt-Anchor" href="#kvp-afp"></a> kvp-afp</h4><p>1.docker部署的方式直接执行启动脚本即可</p><p>2.二进制文件部署</p><p>需要安装nohup</p><p>执行nohup命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./kvp-afp &gt;log_out.log &amp;</span><br></pre></td></tr></table></figure><p>其他操作命令</p><p>1.实时监测日志输出内容命令：tail</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tail -f log_out.log</span><br><span class="line"></span><br><span class="line">tail -100f log_out.log //查看最后100行</span><br></pre></td></tr></table></figure><p>2.查看运行的后台进程：job</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobs -l</span><br></pre></td></tr></table></figure><p>3.检测程序是否再正常运行中：ps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep ./kvp-afp</span><br></pre></td></tr></table></figure><p>5.如果某一个进程起不来，可能是某个端口被占用</p><p>查看使用端口的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:端口</span><br><span class="line">或</span><br><span class="line">netstat -ap|grep 端口</span><br></pre></td></tr></table></figure><p>查看到进程id之后，使用netstat命令查看其占用的端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nap|grep 进程id</span><br></pre></td></tr></table></figure><p>6.终止后台运行的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill 进程号</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;国产化服务改造文档&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#国产化服务改造文档&quot;&gt;&lt;/a&gt; 国产化服务改造文档&lt;/h2&gt;
&lt;p&gt;说明：使用的服务器是[Linux xinfang.kunpeng 4.18.0-193.28.1.el</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="consul" scheme="https://www.yanwq.com/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>ES源码部署</title>
    <link href="https://www.yanwq.com/2024/12/17/ES%E6%BA%90%E7%A0%81%E9%83%A8%E7%BD%B2/"/>
    <id>https://www.yanwq.com/2024/12/17/ES%E6%BA%90%E7%A0%81%E9%83%A8%E7%BD%B2/</id>
    <published>2024-12-17T05:57:00.960Z</published>
    <updated>2024-12-17T06:22:59.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="es源码部署"><a class="markdownIt-Anchor" href="#es源码部署"></a> ES源码部署</h1><h2 id="java部署"><a class="markdownIt-Anchor" href="#java部署"></a> JAVA部署</h2><p>将jdk-8u161-linux-x64.tar.gz拷入合适位置，或着自己去java官网下你想要的版本，要求是8uxxx序列的，版本需比161高</p><p><a href="https://www.oracle.com/cn/java/technologies/javase/javase-jdk8-downloads.html">JAVA官方下载网址</a></p><p>tar -xvf解压</p><p>将解压后的内容拷到合适位置，本例中使用/usr/lib/jdk</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r jdk1.8.0_161/.  /usr/lib/jdk</span><br></pre></td></tr></table></figure><p>写入环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#set java env</span><br><span class="line">export JAVA_HOME=/usr/lib/jdk</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre    </span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib    </span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure><p>使环境变量生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>配置软连接，部分软件可能会从/usr/bin目录下查找Java</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/java  java  /usr/lib/jdk/bin/java 300</span><br><span class="line">sudo update-alternatives --install /usr/bin/javac  javac  /usr/lib/jdk/bin/javac 300</span><br></pre></td></tr></table></figure><p>查看java版本号，判断部署是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="es部署"><a class="markdownIt-Anchor" href="#es部署"></a> ES部署</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/getting-started-install.html">官方部署文档</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/zip-targz.html">官方源码安装部署文档</a></p><h4 id="下载源码包"><a class="markdownIt-Anchor" href="#下载源码包"></a> 下载源码包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.6.2.tar.gz</span><br></pre></td></tr></table></figure><p>直接curl下速度很慢，这里建议直接自己翻墙下载后拷进服务器</p><p>将源码包放置到合适位置，本例中放置于/home</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf elasticsearch-6.6.2.tar.gz</span><br><span class="line">cd elasticsearch-6.6.2/config</span><br><span class="line">vim elasticsearch.yml</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a class="markdownIt-Anchor" href="#修改配置文件"></a> 修改配置文件</h4><p>初始的配置文件中全部是注释状态的，一定要进行设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: my-application</span><br><span class="line"> </span><br><span class="line">path.data: /home/esdata/data</span><br><span class="line"> </span><br><span class="line">path.logs: /home/esdata/log</span><br><span class="line"> </span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"> </span><br><span class="line">http.port: 9200</span><br><span class="line"> </span><br><span class="line"># 是否支持跨域</span><br><span class="line">http.cors.enabled: true</span><br><span class="line"> </span><br><span class="line"># *表示支持所有域名</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure><p>path.data和path.logs是es数据落盘的位置，可以自行调整，本例中使用上述路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim jvm.options</span><br></pre></td></tr></table></figure><p>调整java虚拟机占用的内存大小，官方推荐设置为机器内存的一半，可以根据实际情况进行调整，比如服务压力不大就可以不用设置那么大，另外如果设置的过小的话，CPU的压力就会高起来</p><p>如果服务压力不大且机器配置允许的话，可以写1g，本例中写500m。如果服务压力较大，请根据实际使用时的CPU压力自行调整</p><p>此配置项应该原本就有，不需要加在后面，如果没看到就找找看是不是被注释状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms500m</span><br><span class="line">-Xmx500m</span><br></pre></td></tr></table></figure><h4 id="修改文件标识符大小上限"><a class="markdownIt-Anchor" href="#修改文件标识符大小上限"></a> 修改文件标识符大小上限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>在最后加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count=655360</span><br></pre></td></tr></table></figure><p>使配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>一样是修改文件标识符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br></pre></td></tr></table></figure><p>如果有的话就修改，没有的话就加上【这个应该是原本就有【默认状态下可能是注释着的，你加的这四行得是非注释状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root soft nofile 655370</span><br><span class="line">root hard nofile 655370</span><br><span class="line">* soft nofile 655370</span><br><span class="line">* hard nofile 655370</span><br></pre></td></tr></table></figure><p>这个配置文件修改后就会生效，但是在当前连接中不会生效，需要重新开一个连接，如果是xshell连服务器的，需要重开一个页面这样</p><p>如果是直接在服务器上操作，可以reboot重启服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit -n</span><br></pre></td></tr></table></figure><p>查看文件标识符的配置是否生效</p><h4 id="创建elasticsearch用户"><a class="markdownIt-Anchor" href="#创建elasticsearch用户"></a> 创建elasticsearch用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser elasticsearch</span><br><span class="line">passwd elasticsearch</span><br></pre></td></tr></table></figure><p>输入密码，自己记住</p><p>给予elasticsearch账号ES相关文件夹的权限，包括数据存储的文件夹，和elasticsearch程序所在文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R elasticsearch /home/esdata/</span><br><span class="line">chown -R elasticsearch /home/elasticsearch-6.6.2</span><br></pre></td></tr></table></figure><h4 id="切换到elasticsearch账号启动es"><a class="markdownIt-Anchor" href="#切换到elasticsearch账号启动es"></a> 切换到elasticsearch账号，启动ES</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su elasticsearch</span><br><span class="line">cd /home/elasticsearch-6.6.2</span><br><span class="line">./bin/elasticsearch -d -p pid</span><br></pre></td></tr></table></figure><p>启动后会自动在后台运行，并在当前目录下生成一个名为pid的文件，里面记录着ES进程的pid</p><p>使用此指令查看ES是否正常启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:9200</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;-5ESl62&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;my-application&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;yxlA4dNJQPeei9KiUlVc9w&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;6.6.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_flavor&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;tar&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_hash&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;3bd3e59&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_date&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2019-03-06T15:16:26.864148Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_snapshot&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lucene_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7.6.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;5.6.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minimum_index_compatibility_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;5.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tagline&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>看到此信息，则表示ES服务已经正常启动</p><h4 id="关闭"><a class="markdownIt-Anchor" href="#关闭"></a> 关闭</h4><p>可以使用此指令直接读取pid文件中的进程pid将ES关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill -F pid</span><br></pre></td></tr></table></figure><p>查看ES服务的运行状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep elasticsearch</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root     10700  0.0  0.0  63048   460 pts/1    S    Aug11   0:00 su elasticsearch</span><br><span class="line">root     11939  0.0  0.1  63048  2484 pts/4    S    Aug11   0:00 su elasticsearch</span><br><span class="line">elastic+ 15632  0.0  0.0  14428   996 pts/4    S+   14:52   0:00 grep --color=auto elasticsearch</span><br></pre></td></tr></table></figure><p>如果显示这些，表示ES服务已经被关掉</p><p>如果没有被关掉可以手动kill -9杀掉</p><h4 id="开机自启"><a class="markdownIt-Anchor" href="#开机自启"></a> 开机自启</h4><p>使用root权限</p><p>在/etc/systemd/system目录下新建一个elasticsearch.service文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/systemd/system</span><br><span class="line">vim elasticsearch.service</span><br></pre></td></tr></table></figure><p>写入以下内容，其中</p><p>User 根据你创建的给ES的账号自行调整</p><p>ExecStart 根据你的ES文件目录自行调整</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=elasticsearch</span><br><span class="line">[Service]</span><br><span class="line">User=elasticsearch</span><br><span class="line">LimitNOFILE=100000</span><br><span class="line">LimitNPROC=100000</span><br><span class="line">ExecStart=/home/elasticsearch-6.6.2/bin/elasticsearch</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>开启开机自启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable elasticsearch</span><br></pre></td></tr></table></figure><p>启动ES【现在可以用root账号启动了】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start elasticsearch</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a class="markdownIt-Anchor" href="#参考文档"></a> 参考文档</h2><p><a href="https://www.cnblogs.com/lfri/p/10437266.html">Ubuntu 16.04下Java环境安装与配置</a></p><p><a href="https://blog.csdn.net/xiaoxiongaa0/article/details/90815541">ES安装部署</a></p><p><a href="https://blog.csdn.net/jiankunking/article/details/82770832">CentOS 7 elasticsearch service 开机自启</a></p><h2 id="扩展阅读"><a class="markdownIt-Anchor" href="#扩展阅读"></a> 扩展阅读</h2><p><a href="https://blog.51cto.com/10950710/2124131">总结—elasticsearch启动失败的几种情况及解决</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;es源码部署&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#es源码部署&quot;&gt;&lt;/a&gt; ES源码部署&lt;/h1&gt;
&lt;h2 id=&quot;java部署&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java部署&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="linux" scheme="https://www.yanwq.com/categories/linux/"/>
    
    
    <category term="es数据库" scheme="https://www.yanwq.com/tags/es%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>go连接dm8数据库和操作示范文档</title>
    <link href="https://www.yanwq.com/2024/12/17/go%E8%BF%9E%E6%8E%A5dm8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E6%93%8D%E4%BD%9C%E7%A4%BA%E8%8C%83%E6%96%87%E6%A1%A3/"/>
    <id>https://www.yanwq.com/2024/12/17/go%E8%BF%9E%E6%8E%A5dm8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E6%93%8D%E4%BD%9C%E7%A4%BA%E8%8C%83%E6%96%87%E6%A1%A3/</id>
    <published>2024-12-17T05:54:45.689Z</published>
    <updated>2024-12-17T06:23:24.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go连接dm8数据库和操作示范文档"><a class="markdownIt-Anchor" href="#go连接dm8数据库和操作示范文档"></a> go连接dm8数据库和操作示范文档</h2><h4 id="1安装dm数据库"><a class="markdownIt-Anchor" href="#1安装dm数据库"></a> 1.安装DM数据库</h4><p>请参考 <a href="https://eco.dameng.com/document/dm/zh-cn/start/index">DM 数据库快速上手指南 </a>或者 <code>达梦数据库安装和使用文档.md</code></p><p>数据库安装过程中，请勾选创建 <code>BOOKSHOP</code>，<code>DMHR</code> 示例库，作为数据库模拟环境，（勾选的目的是为了下面连接dm数据库进行增删改查操作作为示例，不然需要自行创建表和表数据）如下图所示：</p><p><img src="/imgs/java-jdbc-dmhr.png" alt="DMHR 示例库" /></p><h4 id="2安装dm驱动包"><a class="markdownIt-Anchor" href="#2安装dm驱动包"></a> 2.安装DM驱动包</h4><p>将提供的 DM 驱动包放在 GOPATH 的 src 目录下。驱动包位于 DM数据库安装目录下：dmdbms/drivers/go/dm-go-driver.zip 解压到 GPPATH 安装路径的 src 下，如图所示：</p><p><img src="/imgs/image-20221021154102867.png" alt="image-20221021154102867" /></p><h4 id="3安装依赖包"><a class="markdownIt-Anchor" href="#3安装依赖包"></a> 3.安装依赖包</h4><p>所需 Go 依赖包有两个，<code>text</code> 和 <code>snappy</code>，从 Git 上把依赖包 clone 到本地，进入到src目录下，右键【Git Bash Here】打开 Git 命令行窗口，依次下载 text 和 snappy 依赖。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/golang/text.git  ./golang.org/x/text</span></span><br><span class="line"></span><br><span class="line">git clone https:<span class="comment">//github.com/golang/snappy  ./github.com/golang/snappy</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20221021154442352.png" alt="image-20221021154442352" /></p><h4 id="4通过go实现连接和操作dm数据库"><a class="markdownIt-Anchor" href="#4通过go实现连接和操作dm数据库"></a> 4.通过go实现连接和操作dm数据库</h4><p>创建项目，项目结构树如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">└── src</span><br><span class="line">    ├── dm    <span class="comment">// dm驱动包</span></span><br><span class="line">    ├── github.com  <span class="comment">// 依赖包</span></span><br><span class="line">    ├── golang.org<span class="comment">// 依赖包</span></span><br><span class="line">└── demo  <span class="comment">// 项目</span></span><br><span class="line">├── main.<span class="keyword">go</span> <span class="comment">// 主函数入口</span></span><br><span class="line">├── <span class="keyword">go</span>.mod  </span><br><span class="line">└── <span class="keyword">go</span>.sum</span><br></pre></td></tr></table></figure><p>main.go文件如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*该例程实现插入数据，修改数据，删除数据，数据查询等基本操作。*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">// 引入相关包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;dm&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">driverName := <span class="string">&quot;dm&quot;</span></span><br><span class="line">dataSourceName := <span class="string">&quot;dm://SYSDBA:SYSDBA@localhost:5236&quot;</span></span><br><span class="line"><span class="keyword">if</span> db, err = connect(driverName, dataSourceName); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = insertTable(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = updateTable(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = queryTable(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = deleteTable(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = disconnect(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建数据库连接 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">(driverName <span class="type">string</span>, dataSourceName <span class="type">string</span>)</span></span> (*sql.DB, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"><span class="keyword">if</span> db, err = sql.Open(driverName, dataSourceName); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = db.Ping(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;connect to \&quot;%s\&quot; succeed.\n&quot;</span>, dataSourceName)</span><br><span class="line"><span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 往产品信息表插入数据 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertTable</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> inFileName = <span class="string">&quot;D:\\java\\vagrant\\data\\gopath\\src\\demo\\2022\\20221020\\data\\1.png&quot;</span></span><br><span class="line"><span class="keyword">var</span> sql = <span class="string">`INSERT INTO production.product(name,author,publisher,publishtime,</span></span><br><span class="line"><span class="string">product_subcategoryid,productno,satetystocklevel,originalprice,nowprice,discount,</span></span><br><span class="line"><span class="string">description,photo,type,papertotal,wordtotal,sellstarttime,sellendtime)</span></span><br><span class="line"><span class="string">VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17);`</span></span><br><span class="line">data, err := ioutil.ReadFile(inFileName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">t1, _ := time.Parse(<span class="string">&quot;2006-Jan-02&quot;</span>, <span class="string">&quot;2005-Apr-01&quot;</span>)</span><br><span class="line">t2, _ := time.Parse(<span class="string">&quot;2006-Jan-02&quot;</span>, <span class="string">&quot;2006-Mar-20&quot;</span>)</span><br><span class="line">t3, _ := time.Parse(<span class="string">&quot;2006-Jan-02&quot;</span>, <span class="string">&quot;1900-Jan-01&quot;</span>)</span><br><span class="line">_, err = db.Exec(sql, <span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;罗贯中&quot;</span>, <span class="string">&quot;中华书局&quot;</span>, t1, <span class="number">4</span>, <span class="string">&quot;9787101046126&quot;</span>, <span class="number">10</span>, <span class="number">19.0000</span>, <span class="number">15.2000</span>,</span><br><span class="line"><span class="number">8.0</span>,</span><br><span class="line"><span class="string">&quot;《三国演义》是中国第一部长篇章回体小说，中国小说由短篇发展至长篇的原因与说书有关。&quot;</span>,</span><br><span class="line">data, <span class="string">&quot;25&quot;</span>, <span class="number">943</span>, <span class="number">93000</span>, t2, t3)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;insertTable succeed&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 修改产品信息表数据 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateTable</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> sql = <span class="string">&quot;UPDATE production.product SET name = :name WHERE productid = 11;&quot;</span></span><br><span class="line"><span class="keyword">if</span> _, err := db.Exec(sql, <span class="string">&quot;三国演义（上）&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;updateTable succeed&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 查询产品信息表 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryTable</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> productid <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> author <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> description dm.DmClob</span><br><span class="line"><span class="keyword">var</span> photo dm.DmBlob</span><br><span class="line"><span class="keyword">var</span> sql = <span class="string">&quot;SELECT productid,name,author,description,photo FROM production.product WHERE productid=11&quot;</span></span><br><span class="line">rows, err := db.Query(sql)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line">fmt.Println(<span class="string">&quot;queryTable results:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">if</span> err = rows.Scan(&amp;productid, &amp;name, &amp;author, &amp;description, &amp;photo); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">blobLen, _ := photo.GetLength()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v %v %v %v %v\n&quot;</span>, productid, name, author, description, blobLen)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 删除产品信息表数据 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteTable</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> sql = <span class="string">&quot;DELETE FROM production.product WHERE productid = 12;&quot;</span></span><br><span class="line"><span class="keyword">if</span> _, err := db.Exec(sql); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;deleteTable succeed&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 关闭数据库连接 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">disconnect</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := db.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;db close failed: %s.\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;disconnect succeed&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p><code>insertTable()</code>接口中<code>inFileName</code>字段是图片路径，需要自行再相应目录下插入图片，并修改路径。</p><p>然后需要引用项目需要的以来增加到<code>go.mod</code>文件中，执行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> mod tidy</span><br></pre></td></tr></table></figure><p>执行完，会发现<code>import</code>引入相关包中<code>dm</code>包是爆红的，需要手动加入到<code>go.mod replace</code>中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">replace (</span><br><span class="line">dm =&gt; ../dm</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后就可以执行<code>main</code>函数了，执行结果如下：</p><p><img src="/imgs/image-20221021155845102.png" alt="image-20221021155845102" /></p><h4 id="5通过dm管理工具查看数据"><a class="markdownIt-Anchor" href="#5通过dm管理工具查看数据"></a> 5.通过DM管理工具查看数据</h4><p>上图执行<code>main</code>函数成功后，可打开<code>DM管理工具</code>（需要管理员权限），连接DM数据库，找到表查看数据是否插入成功</p><p><img src="/imgs/image-20221021160404240.png" alt="image-20221021160404240" /></p><p>或者通过sql语句来查看表中数据：</p><p><img src="/imgs/image-20221021160602890.png" alt="image-20221021160602890" /></p><p>参考文档<a href="https://eco.dameng.com/document/dm/zh-cn/app-dev/go-go.html">Go 数据库接口</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;go连接dm8数据库和操作示范文档&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#go连接dm8数据库和操作示范文档&quot;&gt;&lt;/a&gt; go连接dm8数据库和操作示范文档&lt;/h2&gt;
&lt;h4 id=&quot;1安装dm数据库&quot;&gt;&lt;a class=&quot;ma</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="dm8" scheme="https://www.yanwq.com/tags/dm8/"/>
    
  </entry>
  
  <entry>
    <title>docker部署达梦数据库文档</title>
    <link href="https://www.yanwq.com/2024/12/17/docker%E9%83%A8%E7%BD%B2%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://www.yanwq.com/2024/12/17/docker%E9%83%A8%E7%BD%B2%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2024-12-17T05:54:25.814Z</published>
    <updated>2024-12-17T06:22:50.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker部署达梦数据库文档"><a class="markdownIt-Anchor" href="#docker部署达梦数据库文档"></a> docker部署达梦数据库文档</h2><h4 id="1下载镜像"><a class="markdownIt-Anchor" href="#1下载镜像"></a> 1.下载镜像</h4><p>请在达梦数据库官网下载 <a href="https://eco.dameng.com/download/">Docker 安装包</a>。</p><h4 id="2导入镜像"><a class="markdownIt-Anchor" href="#2导入镜像"></a> 2.导入镜像</h4><p>拷贝安装包到你中意的目录下，执行以下命令导入安装包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i dm8_20220822_rev166351_x86_rh6_64_ctm.tar</span><br></pre></td></tr></table></figure><p>结果显示如下：</p><p><img src="/imgs/image-20221019113036523.png" alt="image-20221019113036523" /></p><p>导入完成后，可以使用 <code>docker images</code> 查看导入的镜像。结果显示如下：</p><p><img src="/imgs/image-20221019113146223.png" alt="image-20221019113146223" /></p><h4 id="3启动容器"><a class="markdownIt-Anchor" href="#3启动容器"></a> 3.启动容器</h4><p>镜像导入后，使用 <code>docker run</code> 启动容器，启动命令如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">5236</span>:<span class="number">5236</span> --restart=always --name dm8_01 --privileged=<span class="literal">true</span> -e PAGE_SIZE=<span class="number">16</span> -e LD_LIBRARY_PATH=/opt/dmdbms/bin -e INSTANCE_NAME=dm8_01 -v /home/dm8:/opt/dmdbms/data dm8_single:v8<span class="number">.1</span><span class="number">.2</span><span class="number">.128</span>_ent_x86_64_ctm_pack4</span><br></pre></td></tr></table></figure><p>结果显示如下：</p><p><img src="/imgs/image-20221019113511872.png" alt="image-20221019113511872" /></p><p>容器启动完成后，使用 <code>docker ps</code>  查看镜像的启动情况，结果显示如下：</p><p><img src="/imgs/image-20221019113550760.png" alt="image-20221019113550760" /></p><p>启动完成后，可通过日志检查启动情况，命令如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f dm8_01</span><br></pre></td></tr></table></figure><p>结果显示如下：</p><p><img src="/imgs/image-20221019113703773.png" alt="image-20221019113703773" /></p><h4 id="4进入容器"><a class="markdownIt-Anchor" href="#4进入容器"></a> 4.进入容器</h4><p>容器启动成功后，执行以下命令进入容器:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it dm8_01 /bin/bash</span><br></pre></td></tr></table></figure><p>结果显示如下：</p><p><img src="/imgs/image-20221019114115438.png" alt="image-20221019114115438" /></p><h4 id="5进入disql验证"><a class="markdownIt-Anchor" href="#5进入disql验证"></a> 5.进入disql验证</h4><p>进入容器后，先执行以下命令防止中文乱码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>结果显示如下：</p><p><img src="/imgs/image-20221019114345261.png" alt="image-20221019114345261" /></p><p>进入disql目录，执行以下命令：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/dmdbms/bin</span><br></pre></td></tr></table></figure><p>结果显示如下：</p><p><img src="/imgs/image-20221019114815752.png" alt="image-20221019114815752" /></p><p>进入disql，执行以下命令</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./disql</span><br></pre></td></tr></table></figure><p>结果显示如下：</p><p><img src="/imgs/image-20221019115006081.png" alt="image-20221019115006081" /></p><p>输入用户名和密码进行验证：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username:SYSDBA</span><br><span class="line">password:SYSDBA001</span><br><span class="line"></span><br><span class="line">提示：新版本 Docker 镜像中数据库默认用户名/密码为SYSDBA/SYSDBA001</span><br></pre></td></tr></table></figure><p>结果显示如下：</p><p><img src="/imgs/image-20221019115225323.png" alt="image-20221019115225323" /></p><p><strong>参考</strong></p><p>docker安装DM数据库可参考[达梦技术文档]<a href="https://eco.dameng.com/document/dm/zh-cn/start/dm-install-docker.html">https://eco.dameng.com/document/dm/zh-cn/start/dm-install-docker.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker部署达梦数据库文档&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docker部署达梦数据库文档&quot;&gt;&lt;/a&gt; docker部署达梦数据库文档&lt;/h2&gt;
&lt;h4 id=&quot;1下载镜像&quot;&gt;&lt;a class=&quot;markdownIt-</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="dm8" scheme="https://www.yanwq.com/tags/dm8/"/>
    
  </entry>
  
  <entry>
    <title>一些linux命令和docker命令</title>
    <link href="https://www.yanwq.com/2024/12/17/%E4%B8%80%E4%BA%9BLinux%E5%91%BD%E4%BB%A4%E5%92%8Cdocker%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.yanwq.com/2024/12/17/%E4%B8%80%E4%BA%9BLinux%E5%91%BD%E4%BB%A4%E5%92%8Cdocker%E5%91%BD%E4%BB%A4/</id>
    <published>2024-12-17T05:51:40.704Z</published>
    <updated>2024-12-17T06:24:07.587Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>指令</th><th>效果</th></tr></thead><tbody><tr><td>lsof -i:端口号</td><td>查看指定端口进程</td></tr><tr><td>kill 进程号</td><td>消灭进程</td></tr><tr><td>nohup 【运行指令，如npm run serve】 &amp;</td><td>在后台运行</td></tr><tr><td>tail -f nohup.out</td><td>查看后台运行的日志【实时</td></tr><tr><td>tail -100 nohup.out</td><td>查看后台运行的日志【最后100条</td></tr><tr><td>unzip 文件名</td><td>解压zip文件到当前目录</td></tr><tr><td>mv 被修改文件名 修改后文件名</td><td>修改文件/文件夹名</td></tr><tr><td>rz</td><td>从本地上传文件到Xshall中的linux当前文件夹</td></tr><tr><td>sz 文件名</td><td>在Xshall中从linux下载文件到本地</td></tr><tr><td>yum install -y lrzsz</td><td>安装上传下载工具</td></tr><tr><td>whereis 已安装的包</td><td>查找包安装的路径</td></tr><tr><td>go test -v -run=“TestGenerateAdminToken”</td><td>乌班图进入项目下jwt文件夹执行test文件</td></tr><tr><td>chmod 777 文件名</td><td>将文件权限提到777</td></tr><tr><td>ln -sf 文件1 文件2</td><td>对文件2建立软连接导向到文件1</td></tr><tr><td>ctrl+R</td><td>搜索历史命令行–选好后回车直接执行</td></tr><tr><td>source /etc/profile</td><td>更新当前用户下的环境变量，非root权限切到root权限后执行</td></tr><tr><td>apt-get update</td><td>升级系统中的包</td></tr><tr><td>apt-get upgrade</td><td>升级系统中的包</td></tr><tr><td>ifconfig</td><td>查看网络相关配置</td></tr><tr><td>cat /proc/cpuinfo</td><td>查看机器cpu详情</td></tr><tr><td>&amp;&amp;</td><td>先执行&amp;&amp;前的指令，如果执行成功，则执行&amp;&amp;后的指令</td></tr><tr><td>scp 文件名 目标服务器账号@ip地址:保存的文件夹路径</td><td>发送文件到目标服务器的指定路径</td></tr><tr><td>`ps -aux</td><td>grep 服务名`</td></tr><tr><td>du -h --max-depth=1 /home</td><td>查看home目录下磁盘空间使用情况</td></tr><tr><td>修改centOS6系统时区</td><td></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/localtime /root/old.timezone</span><br><span class="line">rm /etc/localtime</span><br><span class="line">ln -s /usr/share/zoneinfo/Asia/Chongqing /etc/localtime</span><br></pre></td></tr></table></figure><p>修改docker中的mysql时区<br />先修正系统时区，然后进入docker bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql stop</span><br></pre></td></tr></table></figure><p>关闭数据库，守护进程会自动拉起mysql，mysql关闭后会将使用者弹出docker bash，没有关系，重新进去就好了</p><hr /><h3 id="nginx指令"><a class="markdownIt-Anchor" href="#nginx指令"></a> nginx指令</h3><table><thead><tr><th>指令</th><th>效果</th></tr></thead><tbody><tr><td>nginx</td><td>执行/跑</td></tr><tr><td>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</td><td>用指定的配置文件启动nginx</td></tr><tr><td>ps -ef|grep nginx</td><td>查看nginx是否启动</td></tr><tr><td>kill nginx:master进程号</td><td>停止nginx</td></tr><tr><td>kill -hup nginx:master进程号</td><td>重启nginx</td></tr><tr><td>nginx -s reload</td><td>重启nginx</td></tr><tr><td>nginx -t</td><td>测试nginx的配置文件可用性</td></tr></tbody></table><hr /><h3 id="分屏幕使用相关指令"><a class="markdownIt-Anchor" href="#分屏幕使用相关指令"></a> 分屏幕使用相关指令</h3><table><thead><tr><th>指令</th><th>效果</th></tr></thead><tbody><tr><td>sudo screen -S 屏幕名</td><td>建立一个指定名称的屏幕并进入</td></tr><tr><td>sudo screen -list</td><td>查看当前窗口列表【screen列表】【会显示窗口对应的进程号】</td></tr><tr><td>sudo screen -r -D 进程号</td><td>进入指定进程的窗口</td></tr><tr><td>【在某个窗口中】ctrl+a+d</td><td>回到主窗口</td></tr></tbody></table><hr /><h3 id="git操作相关指令"><a class="markdownIt-Anchor" href="#git操作相关指令"></a> git操作相关指令</h3><table><thead><tr><th>指令</th><th>效果</th></tr></thead><tbody><tr><td>git clone + gilab上的http路径</td><td>克隆master到此处</td></tr><tr><td>git pull origin develop</td><td>在文件夹中拉取develop的代码</td></tr><tr><td>supervisorctl reload</td><td>重启supervisor的守护进程【会关闭supervisor当前正在跑的程序】</td></tr><tr><td>supervisorctl restart 项目名</td><td>supervisor重启指定项目</td></tr></tbody></table><hr /><h3 id="windows指令"><a class="markdownIt-Anchor" href="#windows指令"></a> windows指令</h3><table><thead><tr><th>指令</th><th>效果</th></tr></thead><tbody><tr><td>powercfg -h off</td><td>关闭计算机休眠并删除休眠文件，释放C盘空间【管理员身份打开cmd】</td></tr></tbody></table><h4 id="ubuntu命令"><a class="markdownIt-Anchor" href="#ubuntu命令"></a> ubuntu命令</h4><p>查看系统版本:sudo lsb_release -a</p><p>linux内核版本:cat /proc/version</p><h5 id="或者"><a class="markdownIt-Anchor" href="#或者"></a> 或者</h5><p>kernel 版本和操作系统架构，运行命令：uname -a</p><h2 id="docker命令"><a class="markdownIt-Anchor" href="#docker命令"></a> Docker命令</h2><p>构建<code>projectName</code>镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build . -t projectName:0.0.1  //:0.0.1 是版本号</span><br><span class="line">或者</span><br><span class="line">docker build -t projectName:0.0.1 .</span><br></pre></td></tr></table></figure><p>执行下面的命令来运行镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8888:8888 goweb_app</span><br></pre></td></tr></table></figure><p>列出docker本地镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>删除本地镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi projectName:0.0.1</span><br></pre></td></tr></table></figure><p>通过镜像的id来删除指定镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi &lt;image id&gt;</span><br></pre></td></tr></table></figure><p>查看我们已经启动的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>查看我们已经启动的容器(包括已经退出的)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>停止已经启动的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop CONTAINER ID</span><br></pre></td></tr></table></figure><p>进入mysql容器命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@428753b73869:/# </span><br></pre></td></tr></table></figure><p><strong>保存Docker镜像为文件</strong></p><p>如果要讲镜像保存为本地文件，可以使用Docker save命令。</p><p>命令格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker save -o 保存后的文件名   要保存的镜像</span><br><span class="line"></span><br><span class="line">如：Docker save实例</span><br><span class="line"></span><br><span class="line">docker save -o java8.tar lwieske/java-8</span><br></pre></td></tr></table></figure><p>从文件载入镜像可以使用Docker load命令。</p><p>命令格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load --input 文件</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; 文件名</span><br></pre></td></tr></table></figure><p>如：Docker load实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; java8.tar</span><br></pre></td></tr></table></figure><p>查看端口是否被占用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:端口号      如：lsof -i:3306</span><br></pre></td></tr></table></figure><p>kill占用端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill PID</span><br></pre></td></tr></table></figure><p>查看ubuntu版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><h3 id="用kvpl项目作为例子来打包镜像"><a class="markdownIt-Anchor" href="#用kvpl项目作为例子来打包镜像"></a> 用kvpl项目作为例子来打包镜像</h3><h5 id="1载入基础镜像kvp-centos-ffmpeg-minialimg"><a class="markdownIt-Anchor" href="#1载入基础镜像kvp-centos-ffmpeg-minialimg"></a> 1.载入基础镜像（kvp-centos-ffmpeg-minial.img）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i kvp-centos-ffmpeg-minial.img</span><br></pre></td></tr></table></figure><p>成功后可以用 <code>docker iamge</code>查看镜像</p><h5 id="2进入到kvpl目录下用dockerfile构建kvpl镜像"><a class="markdownIt-Anchor" href="#2进入到kvpl目录下用dockerfile构建kvpl镜像"></a> 2.进入到kvpl目录下，用dockerfile构建<code>kvpl</code>镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. cd $GOPATH/src/navi/kvpl</span><br><span class="line"></span><br><span class="line">2. docker build -t kvp:0.0.1 .   // 最后的 . 就是在指定路径下找Dockerfile文件构建</span><br></pre></td></tr></table></figure><p>成功后可以用 <code>docker iamge</code>查看镜像</p><h5 id="3保存镜像"><a class="markdownIt-Anchor" href="#3保存镜像"></a> 3.保存镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o kvpl.tar kvpl         //kvpl.tar是保存后的文件名,kvpl是镜像名</span><br></pre></td></tr></table></figure><p>保存后可以在当前路径下输入命令<code>ll</code>，查看保存的镜像 <code>kvpl.tar</code>文件</p><p>在windows环境下打包二进制文件,然后到ubuntu里打包成docker镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=linux GOARCH=amd64 go build -o order-rpc order.go</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lsof -i:端口号&lt;/td&gt;
&lt;td&gt;查看指定端口进程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kill 进程号&lt;/td&gt;</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="docker" scheme="https://www.yanwq.com/tags/docker/"/>
    
    <category term="linux" scheme="https://www.yanwq.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>使用git基础命令</title>
    <link href="https://www.yanwq.com/2024/12/17/%E4%BD%BF%E7%94%A8git%E6%8B%89%E5%8F%96%E5%88%86%E6%94%AF/"/>
    <id>https://www.yanwq.com/2024/12/17/%E4%BD%BF%E7%94%A8git%E6%8B%89%E5%8F%96%E5%88%86%E6%94%AF/</id>
    <published>2024-12-17T05:51:18.948Z</published>
    <updated>2024-12-17T06:24:26.085Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1使用git拉去fork分支步骤"><a class="markdownIt-Anchor" href="#1使用git拉去fork分支步骤"></a> 1.使用Git拉去Fork分支步骤：</h5><p>1.打开到GOPATH目录下，右键<code>Git Bash Here</code>,进入Git命令界面（所有部门代码都是在navi文件夹下打开，F:\vagrant\data\gopath\src\navi）</p><p>2.克隆远程仓库到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;url&gt;  //url:fork分支后的http地址</span><br></pre></td></tr></table></figure><p>3.进入到 clone 的目录（F:\vagrant\data\gopath\src\navi\XXXX文件夹）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>3.关联远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add main &lt;url&gt;  //url:navi仓库http地址</span><br></pre></td></tr></table></figure><p>4.查看远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>5.拉取远端main所有分支到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch main</span><br></pre></td></tr></table></figure><p>6.查看拉取到本地的分支列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><p>7.创建分支 （一般是develop）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;name&gt; main/&lt;name&gt;</span><br></pre></td></tr></table></figure><p>8.切换分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;name&gt; </span><br></pre></td></tr></table></figure><p>或者步骤7和8合并：创建并切换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;name&gt;  main/&lt;name&gt;</span><br></pre></td></tr></table></figure><p>查看远程仓库信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><p>查看远程仓库详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>与远程仓库代码同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git pull = git fetch + git merge</span></span><br></pre></td></tr></table></figure><p><strong>如果你想完全地覆盖本地的代码，只保留服务器端代码，则直接回退到上一个版本，再进行pull</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>其中git reset是针对版本,如果想针对文件回退本地修改,使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout HEAD [file]</span><br></pre></td></tr></table></figure><h5 id="2提交代码到远程仓库新项目"><a class="markdownIt-Anchor" href="#2提交代码到远程仓库新项目"></a> 2.提交代码到远程仓库新项目</h5><p>1.关联origin远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin http://yanwq@192.168.1.189/yanwq/koe.git</span><br></pre></td></tr></table></figure><p>2.关联main远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add main http://yanwq@192.168.1.189/navi/koe.git</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.查看远程仓库详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>4.拉取main远程仓库 develop分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull mian develop</span><br><span class="line"></span><br><span class="line">//出现报错</span><br><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure><p>5.拉取main远程仓库develop分支 历史不相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git pull --allow-unrelated-histories main develop</span><br><span class="line"></span><br><span class="line">//--allow-unrelated-histories不相关拉取</span><br><span class="line">//出现报错</span><br><span class="line">error: Your local changes to the following files would be overwritten by merge:</span><br></pre></td></tr></table></figure><p>6.git工作区状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">//出现绿色的</span><br><span class="line">Changes to be committed:</span><br><span class="line">new file :XXX</span><br><span class="line">deleted: XXX</span><br><span class="line">renamed:XXX</span><br><span class="line">//出现红色的</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">modified:XXX</span><br></pre></td></tr></table></figure><p>7.把文件添加进去，实际上就是把文件修改添加到暂存区；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">//warning: LF will be .....</span><br></pre></td></tr></table></figure><p>8.git工作区状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">//只有绿色</span><br></pre></td></tr></table></figure><p>9.<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。 “feat:init&quot;实际就是远程仓库的Last commit 字段，一般为写入提交更改的具体模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;feat: init&quot;</span><br></pre></td></tr></table></figure><p>10.git工作区状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status </span><br><span class="line">//出现</span><br><span class="line">On branch develop</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>11.把两段不相干的 分支进行强行合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --allow-unrelated-histories main develop</span><br></pre></td></tr></table></figure><p>12.推送提交到远程仓库（自己分支）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin develop</span><br></pre></td></tr></table></figure><p>13.推送提交到远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push main develop</span><br></pre></td></tr></table></figure><p>14.查看详细提交历史</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br><span class="line">//q退出</span><br></pre></td></tr></table></figure><h5 id="3修改远程仓库已有的项目代码"><a class="markdownIt-Anchor" href="#3修改远程仓库已有的项目代码"></a> 3.修改远程仓库已有的项目代码</h5><p>1.查看远程仓库详细信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>2.查看git工作区状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">//出现绿色的</span><br><span class="line">Changes to be committed:</span><br><span class="line">new file :XXX</span><br><span class="line">deleted: XXX</span><br><span class="line">renamed:XXX</span><br><span class="line">//出现红色的</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">modified:XXX</span><br></pre></td></tr></table></figure><p>3.把文件添加进去，实际上就是把文件修改添加到暂存区；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">//warning: LF will be .....</span><br></pre></td></tr></table></figure><p>4.git工作区状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">//只有绿色</span><br></pre></td></tr></table></figure><p>5.<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。 “feat:init&quot;实际就是远程仓库的Last commit 字段，一般为写入提交更改的具体模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;feat: init&quot;</span><br></pre></td></tr></table></figure><p>6.git工作区状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status </span><br><span class="line">//出现</span><br><span class="line">On branch develop</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>7.推送提交到远程仓库（只需要origin）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push         //origin develop</span><br></pre></td></tr></table></figure><p>8.ctril点击 第7步返回的remote ： http://… ，跳转地址，点击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Change branches</span><br></pre></td></tr></table></figure><p>9.点击合并分支并继续</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Compare branches and continue</span><br></pre></td></tr></table></figure><p>10.接受合并请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept merge request</span><br></pre></td></tr></table></figure><p>问题：有时候遇到需要删除本地代码，从远程仓库中拉取最新代码的情况。<br />解决方法：当存在多个分支时，首先切换到当前的分支</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>然后 git 强行pull并覆盖本地文件 （一般到develop分支）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all  </span><br><span class="line">git reset --hard origin/master </span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h4 id="方法一-通过命令直接修改远程地址"><a class="markdownIt-Anchor" href="#方法一-通过命令直接修改远程地址"></a> 方法一 通过命令直接修改远程地址</h4><ol><li>进入git_test根目录</li><li>git remote 查看所有远程仓库， git remote xxx 查看指定远程仓库地址</li><li>git remote set-url origin <a href="http://192.168.100.235:9797/john/git_test.git">http://192.168.100.235:9797/john/git_test.git</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;1使用git拉去fork分支步骤&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1使用git拉去fork分支步骤&quot;&gt;&lt;/a&gt; 1.使用Git拉去Fork分支步骤：&lt;/h5&gt;
&lt;p&gt;1.打开到GOPATH目录下，右键&lt;code&gt;Git B</summary>
      
    
    
    
    <category term="Git" scheme="https://www.yanwq.com/categories/Git/"/>
    
    
    <category term="git" scheme="https://www.yanwq.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>nginx在windows实现开机自启</title>
    <link href="https://www.yanwq.com/2024/11/27/nginx%E5%9C%A8winodws%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
    <id>https://www.yanwq.com/2024/11/27/nginx%E5%9C%A8winodws%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</id>
    <published>2024-11-27T11:38:46.212Z</published>
    <updated>2024-11-27T11:43:29.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx在windows实现开机自启"><a class="markdownIt-Anchor" href="#nginx在windows实现开机自启"></a> nginx在windows实现开机自启</h2><p>1.Windows Service Wrapper工具下载</p><p>下载地址：<strong><a href="https://github.com/winsw/winsw/releases">https://github.com/winsw/winsw/releases</a></strong></p><p><img src="/imgs/image-20241018103608753.png" alt="image-20241018103608753" /></p><p>2.将 <code>WinSw-x64.exe</code> 放到 <code>nginx</code> 目录下，重命名为 <code>nginx-service.exe</code></p><p><img src="/imgs/image-20241018103807682.png" alt="image-20241018103807682" /></p><p>3.在 <code>nginx</code> 目录下新建服务日志文件夹 <code>server-logs</code> ,用于存放 <code>nginx</code> 服务相关日志</p><p><img src="/imgs/image-20241018104055834.png" alt="image-20241018104055834" /></p><p>4.在 <code>nginx</code> 目录下新建配置文件 <code>nginx-service.xml</code>,写入编辑信息，配置好后就可以将Nginx注册为Windows服务</p><p><img src="/imgs/image-20241018104258153.png" alt="image-20241018104258153" /></p><p>配置信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- nginx-service.xml --&gt;</span><br><span class="line">&lt;service&gt;</span><br><span class="line">    &lt;id&gt;nginx&lt;/id&gt;</span><br><span class="line">    &lt;name&gt;Nginx Service&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Nginx服务&lt;/description&gt;</span><br><span class="line">    &lt;logpath&gt;D:\java\nginx\server-logs&lt;/logpath&gt;</span><br><span class="line">    &lt;log mode=&quot;roll-by-size&quot;&gt;</span><br><span class="line">&lt;sizeThreshold&gt;10240&lt;/sizeThreshold&gt;     </span><br><span class="line">&lt;keepFiles&gt;8&lt;/keepFiles&gt;  </span><br><span class="line">&lt;/log&gt;</span><br><span class="line">    &lt;executable&gt;D:\java\nginx\nginx.exe&lt;/executable&gt;</span><br><span class="line">    &lt;stopexecutable&gt;D:\java\nginx\nginx.exe -s stop&lt;/stopexecutable&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20241018104728560.png" alt="image-20241018104728560" /></p><p>5.在 <code>nginx</code> 目录下以管理员运行命令 <code>nginx-service.exe install</code> 完成注册</p><p><img src="/imgs/image-20241018104836143.png" alt="image-20241018104836143" /></p><p>6.启动服务 <code>nginx-service.exe start</code>,完成开机自启</p><p><img src="/imgs/image-20241018105053202.png" alt="image-20241018105053202" /></p><p>7.查看 <code>服务</code> ,检查是否自启成功</p><p><img src="/imgs/image-20241018105126293.png" alt="image-20241018105126293" /></p><hr /><p><strong>WinSW命令说明</strong></p><p><strong>install</strong>：注册服务</p><p><strong>uninstall</strong>：卸载服务</p><p><strong>start</strong>：启动服务，启动服务之前，该服务必须已经安装</p><p><strong>stop</strong>：停止服务</p><p><strong>stopwait</strong>：停止服务，直到服务退出，此命令才返回</p><p><strong>restart</strong>：重启服务</p><p><strong>status</strong>：查看服务状态</p><hr /><p>windows 自行开发的项目开机自启 参考地址：<a href="https://www.jianshu.com/p/759bc5ae01d1">https://www.jianshu.com/p/759bc5ae01d1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;nginx在windows实现开机自启&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nginx在windows实现开机自启&quot;&gt;&lt;/a&gt; nginx在windows实现开机自启&lt;/h2&gt;
&lt;p&gt;1.Windows Service Wra</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.yanwq.com/categories/Windows/"/>
    
    
    <category term="nginx" scheme="https://www.yanwq.com/tags/nginx/"/>
    
    <category term="WinSW" scheme="https://www.yanwq.com/tags/WinSW/"/>
    
  </entry>
  
  <entry>
    <title>windows下通过nginx配置项目</title>
    <link href="https://www.yanwq.com/2024/10/17/windows%E4%B8%8B%E9%80%9A%E8%BF%87nginx%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9B%AE/"/>
    <id>https://www.yanwq.com/2024/10/17/windows%E4%B8%8B%E9%80%9A%E8%BF%87nginx%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9B%AE/</id>
    <published>2024-10-17T09:53:12.728Z</published>
    <updated>2024-10-17T10:00:27.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows下通过nginx配置项目"><a class="markdownIt-Anchor" href="#windows下通过nginx配置项目"></a> windows下通过nginx配置项目</h2><p><strong>说明：</strong></p><p>本文档演示windows下通过nginx配置纯vue项目，在浏览器上访问页面。</p><p><strong>准备：</strong></p><ol><li>后端：go语言打包<code>main.exe </code>服务，通过配置项连接 <code>mysql</code> 数据库</li><li>前端：<code>vue</code> 项目</li></ol><p><strong>操作步骤：</strong></p><ol><li>通过 <code>npm run build</code> 打包生成<code>dist</code> 前端静态文件 (本文档不展示)</li><li>在 <code>windows</code> 下载 <code>nginx</code></li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://nginx.org/en/download.html</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20241017172300423.png" alt="image-20241017172300423" /></p><ol start="2"><li><p>下载后解压（路径可以根据你自己来定，我这边解压到 <code>D:\java</code>目录下，并重命名为nginx）</p><p><img src="/imgs/image-20241017172526623.png" alt="image-20241017172526623" /></p></li><li><p>配置 <code>nginx</code></p><p>打开 Nginx 的配置文件 <code>nginx.conf</code>，通常位于 <code>\nginx\conf\nginx.conf</code>。</p><p>在 <code>http</code> 块中添加以下配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;  # 监听80端口</span><br><span class="line">        server_name  localhost;  # 服务器名称</span><br><span class="line"></span><br><span class="line">        # 前端静态文件目录</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   C:/path/to/your/dist;  # 替换为你的dist文件夹路径</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            try_files $uri $uri/ /index.html;  # 处理单页应用的刷新问题</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 反向代理后端服务</span><br><span class="line">        location /api/ &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:8080;  # 替换为你的main.exe监听的端口</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>location /</code>：处理前端静态文件的请求。<code>root</code> 指定了静态文件的目录，<code>try_files</code> 用于处理单页应用的刷新问题。</li><li><code>location /api/</code>：处理后端 API 请求。<code>proxy_pass</code> 指定了后端服务的地址，通常是 <code>main.exe</code> 监听的地址和端口。</li></ul><p>根据实际的内容进行修改</p><p><img src="/imgs/image-20241017173604496.png" alt="image-20241017173604496" /></p></li><li><p>启动后端服务<code>main.exe</code></p><p><img src="/imgs/image-20241017173330248.png" alt="image-20241017173330248" /></p></li><li><p>进到 <code>nginx</code> 目录下启动</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nginx</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20241017173917101.png" alt="image-20241017173917101" /></p></li><li><p>访问管理页面</p><p>在浏览器上输入 <code>127.0.0.1:80</code> (nginx配置里面定义的80端口)</p><p><img src="/imgs/image-20241017174029898.png" alt="image-20241017174029898" /></p></li><li><p>验证配置</p><ul><li>确保 <code>main.exe</code> 正常运行，并且没有报错。</li><li>检查 Nginx 的日志文件（通常在 <code>\nginx\logs</code> 目录下），查看是否有任何错误信息。</li></ul></li><li><p>关闭 <code>nginx</code></p><p>在 <code>nginx</code>目录下执行 <code>nginx -s stop</code>，再次访问页面无法打开。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windows下通过nginx配置项目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#windows下通过nginx配置项目&quot;&gt;&lt;/a&gt; windows下通过nginx配置项目&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;</summary>
      
    
    
    
    <category term="windows" scheme="https://www.yanwq.com/categories/windows/"/>
    
    
    <category term="go" scheme="https://www.yanwq.com/tags/go/"/>
    
    <category term="mysql" scheme="https://www.yanwq.com/tags/mysql/"/>
    
    <category term="vue" scheme="https://www.yanwq.com/tags/vue/"/>
    
    <category term="nginx" scheme="https://www.yanwq.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>国产化鲲鹏系统安装ffmpeg</title>
    <link href="https://www.yanwq.com/2024/07/03/%E5%9B%BD%E4%BA%A7%E5%8C%96%E9%BA%92%E9%BA%9F%E5%AE%89%E8%A3%85ffmpeg/"/>
    <id>https://www.yanwq.com/2024/07/03/%E5%9B%BD%E4%BA%A7%E5%8C%96%E9%BA%92%E9%BA%9F%E5%AE%89%E8%A3%85ffmpeg/</id>
    <published>2024-07-03T09:04:39.907Z</published>
    <updated>2024-07-03T09:08:37.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="国产化鲲鹏系统安装ffmpeg"><a class="markdownIt-Anchor" href="#国产化鲲鹏系统安装ffmpeg"></a> 国产化鲲鹏系统安装ffmpeg</h2><p><a href="https://ic-openlabs.huawei.com/client/#/compatibility/unioncompaty">华为鲲鹏开源软件适配中心</a></p><p>1.搜索ffmpeg下载源码包</p><p><img src="/imgs/image-20240703165221572.png" alt="image-20240703165221572" /></p><p>2.根据安装指导安装</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;国产化鲲鹏系统安装ffmpeg&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#国产化鲲鹏系统安装ffmpeg&quot;&gt;&lt;/a&gt; 国产化鲲鹏系统安装ffmpeg&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://ic-openlabs.huaw</summary>
      
    
    
    
    <category term="linux/arm64 鲲鹏" scheme="https://www.yanwq.com/categories/linux-arm64-%E9%B2%B2%E9%B9%8F/"/>
    
    
    <category term="ffmpeg" scheme="https://www.yanwq.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>go通过gorm使用达梦数据库</title>
    <link href="https://www.yanwq.com/2024/04/10/go%E9%80%9A%E8%BF%87gorm%E4%BD%BF%E7%94%A8%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://www.yanwq.com/2024/04/10/go%E9%80%9A%E8%BF%87gorm%E4%BD%BF%E7%94%A8%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2024-04-10T10:46:32.681Z</published>
    <updated>2024-04-10T10:53:28.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go通过gorm使用达梦数据库"><a class="markdownIt-Anchor" href="#go通过gorm使用达梦数据库"></a> go通过gorm使用达梦数据库</h2><p>根据官方文档说明，go想要通过gorm使用达梦数据库，需要下载orm方言包。</p><p><img src="/imgs/image-20240410111239029.png" alt="image-20240410111239029" /></p><p>如图所示，达梦官方提供了2个版本的orm方言包</p><ul><li>V1：<a href="http://github.com/jinzhu/gorm">github.com/jinzhu/gorm</a></li><li>V2：<a href="http://gorm.io/gorm">gorm.io/gorm</a></li></ul><p>本文档演示使用的是V2版本方言包</p><hr /><h4 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h4><ul><li><code>dm</code> 驱动包 + 依赖</li><li>v2方言包</li></ul><p>go官方驱动地址：<a href="https://download.dameng.com/eco/adapter/resource/go/dm-go-driver.zip">https://download.dameng.com/eco/adapter/resource/go/dm-go-driver.zip</a></p><p>下载好解压目录如下：</p><ul><li>dm-go-driver.zip  // 驱动包</li><li>gorm_v1_dialect.zip  // v1方言包</li><li>gorm_v2_dialect.zip  // v2方言包</li></ul><p><strong>步骤</strong></p><ol><li><p>将 <code>dm-go-driver.zip</code> 解压之后，把 <code>dm</code> 包拷入到 <code>GOPATH</code>的<code>src</code> 目录下 【这个是dm驱动包】</p></li><li><p>在 <code>src</code> 目录下 终端下载依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/golang/snappy</span><br><span class="line"></span><br><span class="line">go get golang.org/x/text/encoding</span><br></pre></td></tr></table></figure></li><li><p>创建项目（演示的demo项目为 <code>dm8-test</code>）</p></li><li><p>将 <code>gorm_v2_dialect.zip</code> 解压之后，把<code>dm</code> 包拷入到<code>dm8-test</code> 项目 目录下（查看下面结构树）【这个是dm方言包】</p><p>此时，目录树如下</p><p>src<br />├── dm  // 驱动包<br />├── dm8-test  // 演示demo<br />│   ├── dm  // 方言包<br />│   │   ├── create.go<br />│   │   ├── dm.go<br />│   │   ├── dm_test.go<br />│   │   └── migrator.go<br />│   ├── go.mod<br />│   ├── go.sum<br />│   └── main.go<br />├── <a href="http://github.com">github.com</a> // 依赖包<br />└── <a href="http://golang.org">golang.org</a>  // 依赖包</p></li><li><p>打开项目（演示的demo项目为 <code>dm8-test</code>）-&gt; <code>go.mod</code> -&gt; 新增<code>replace dm =&gt; ../dm</code> （指定dm包的来源路径）</p></li></ol><p><img src="/imgs/image-20240410114700871.png" alt="image-20240410114700871" /></p><hr /><h4 id="连接"><a class="markdownIt-Anchor" href="#连接"></a> 连接</h4><p>在 <code>main.go</code> 中测试连接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;dm8-test/dm&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err := gorm.Open(dm.Open(<span class="string">&quot;dm://SYSDBA:SYSDBA@dm数据库IP:5236&quot;</span>), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;connect dm8 success!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240410115921736.png" alt="image-20240410115921736" /></p><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><p>如果需要封装达梦数据库到组件中，可以把dm驱动包 和 dm方言包拷入对应组件中，记得需要删除dm驱动包中的 <code>go.mod</code> 和 <code>.idea</code> ，加到组件包的 <code>go.mod</code>中即可，同时还需要修改dm方言包中的引用dm驱动包的路径（除去GOPATH的实际路径即可）</p><p><img src="/imgs/image-20240410184441301.png" alt="image-20240410184441301" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;go通过gorm使用达梦数据库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#go通过gorm使用达梦数据库&quot;&gt;&lt;/a&gt; go通过gorm使用达梦数据库&lt;/h2&gt;
&lt;p&gt;根据官方文档说明，go想要通过gorm使用达梦数据库，需要下载or</summary>
      
    
    
    
    <category term="Go" scheme="https://www.yanwq.com/categories/Go/"/>
    
    
    <category term="达梦数据库" scheme="https://www.yanwq.com/tags/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="gorm" scheme="https://www.yanwq.com/tags/gorm/"/>
    
  </entry>
  
  <entry>
    <title>uos-arm64 项目国产化部署</title>
    <link href="https://www.yanwq.com/2024/04/07/uos-arm64%E5%9B%BD%E4%BA%A7%E5%8C%96/"/>
    <id>https://www.yanwq.com/2024/04/07/uos-arm64%E5%9B%BD%E4%BA%A7%E5%8C%96/</id>
    <published>2024-04-07T08:00:01.428Z</published>
    <updated>2024-04-07T08:10:58.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="国产化部署"><a class="markdownIt-Anchor" href="#国产化部署"></a> 国产化部署</h2><p>说明：在 <code>Uos</code> 操作系统<code>arm64</code>架构服务器上实现项目国产化。</p><p>实现列表：</p><ol><li>应用层</li><li>Sqlite</li><li>达梦数据库</li></ol><hr /><h4 id="应用层"><a class="markdownIt-Anchor" href="#应用层"></a> 应用层</h4><h5 id="可执行文件启动"><a class="markdownIt-Anchor" href="#可执行文件启动"></a> 可执行文件启动</h5><p>说明：由于这个服务需要用到Sqlite，并且需要在linux/arm64服务器上执行。而我们的项目在windos环境下开发，就需要使用到交叉编译。由于安装了桌面版的ubuntu，可以通过linux环境访问到window路径。</p><ul><li>安装 <code>arm64</code> 交叉编译工具链</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><ul><li>设置环境变量（设置环境变量以指示编译器和链接器使用arm64交叉编译工具链）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export CC=aarch64-linux-gnu-gcc</span><br><span class="line">export CXX=aarch64-linux-gnu-g++</span><br></pre></td></tr></table></figure><ul><li>通过linux环境进入到项目目录，交叉编译项目（以 <code>unix-test</code> 项目举例）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd unix-test</span><br><span class="line"></span><br><span class="line">GOOS=linux GOARCH=arm64 CGO_ENABLED=<span class="number">1</span> CC=aarch64-linux-gnu-gcc <span class="keyword">go</span> build -v --ldflags=<span class="string">&quot;-X &#x27;google.golang.org/protobuf/reflect/protoregistry.conflictPolicy=warn&#x27;&quot;</span> -o unix-test cmd/main.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><ul><li>成功编译后，将可执行文件拷入 <code>linx/arm64</code> 服务器上</li><li>升级权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x unix-test</span><br></pre></td></tr></table></figure><ul><li>执行可执行文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./unix-test</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240315163638187.png" alt="image-20240315163638187" /></p><p>可以看到使用的 <code>Sqlite</code> 数据库，连接成功，并且调用接口成功。</p><hr /><h5 id="docker启动"><a class="markdownIt-Anchor" href="#docker启动"></a> docker启动</h5><p>在上面可执行文件基础上，使用arm64系统的基础镜像，进行docker部署</p><ul><li>进入镜像仓库地址选择满足arm64版本的基础镜像</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//hub.docker.com</span></span><br></pre></td></tr></table></figure><ul><li>在terminal(终端)上执行复制的命令(我使用的devel版本，可自行选择版本下载)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull arm64v8/ubuntu:devel</span><br></pre></td></tr></table></figure><p>注：这里试过无数个 <code>busybox</code> 基础镜像版本，都不行；<code>arm64v8/centos:latest</code> 测试过也是可以的，但是被弃用了，所以就使用ubuntu了</p><ul><li>将 <code>Dockerfile</code> 文件拷贝到服务器可执行文件 <code>unix-test</code>目录下， 修改<code>FROM</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM arm64v8/ubuntu:devel</span><br></pre></td></tr></table></figure><ul><li>构建镜像（演示的项目为unix-test）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t unix-test:1.0.0 .</span><br></pre></td></tr></table></figure><ul><li>执行docker run 命令启动服务</li></ul><p><img src="/imgs/image-20240407155259272.png" alt="image-20240407155259272" /></p><hr /><h4 id="sqlite"><a class="markdownIt-Anchor" href="#sqlite"></a> Sqlite</h4><p>再windows环境下直接生成db文件即可。将db文件拷入 <code>linux/arm64</code>服务对应文件，读取即可。</p><ul><li>再windows下进入Sqlite目录下</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sqlite3</span><br></pre></td></tr></table></figure><ul><li>生成db文件（以 <code>unix-test.db</code> 为例）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.open unix-test.db</span><br></pre></td></tr></table></figure><ul><li>再 <code>sqlite</code> 目录下会生成一个 <code>unix-test.db</code> 文件，拷入 <code>linux/arm64</code> 服务器对应位置</li></ul><hr /><h4 id="达梦数据库"><a class="markdownIt-Anchor" href="#达梦数据库"></a> 达梦数据库</h4><p>需要下载使用arm64系统的镜像</p><ul><li>在镜像仓库中找到满足的镜像</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//hub.docker.com/r/qinchz/dm8-arm64</span></span><br><span class="line"></span><br><span class="line">我选择的是dm8</span><br></pre></td></tr></table></figure><ul><li>在terminal(终端)上执行复制的命令（镜像很大，下载很慢）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull qinchz/dm8-arm64</span><br></pre></td></tr></table></figure><ul><li>将基础镜像保存到本地</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o dm8-arm64.img qinchz/dm8-arm64:latest</span><br></pre></td></tr></table></figure><ul><li>将镜像拷入到arm64服务器</li><li>创建docker-compose.yml文件</li></ul><p>vim docker-compose.yml</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  DM8:</span><br><span class="line">    image: qinchz/dm8-arm64:latest</span><br><span class="line">    restart: always</span><br><span class="line">    container_name: dm8</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5236:5236&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /home/test/kst/yanwq/md8/data:/home/dmdba/data</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>version: '3'</code>：指定使用的Docker Compose文件版本</li><li><code>services</code>：定义服务的部分开始</li><li><code>DM8</code>：定义服务的名称为DM8</li><li><code>image</code>：指定使用的镜像为qinchz/dm8-arm64:latest</li><li><code>restart: always</code>：指定容器在退出时自动重启</li><li><code>container_name: dm8</code>：指定创建的容器名称为dm8</li><li><code>ports</code>：指定容器端口映射关系</li><li><code>5236:5236</code>：将主机的5236端口映射到容器的5236端口</li><li><code>mem_limit: 1g</code>：限制容器使用的内存为1GB</li><li><code>memswap_limit: 1g</code>：限制容器可以使用的swap交换空间为1GB</li><li><code>volumes</code>：指定挂载卷的配置</li><li><code>/home/test/kst/yanwq/md8/data:/home/dmdba/data</code>：将主机的/home/test/kst/yanwq/md8/data目录挂载到容器的/home/dmdba/data目录，实现主机和容器之间的文件共享</li></ul><hr /><ul><li>启动服务</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_57484285/article/details/128191061?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-128191061-blog-123725042.235%5Ev43%5Epc_blog_bottom_relevance_base4&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-128191061-blog-123725042.235%5Ev43%5Epc_blog_bottom_relevance_base4">使用DBeaver运行达梦数据库</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;国产化部署&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#国产化部署&quot;&gt;&lt;/a&gt; 国产化部署&lt;/h2&gt;
&lt;p&gt;说明：在 &lt;code&gt;Uos&lt;/code&gt; 操作系统&lt;code&gt;arm64&lt;/code&gt;架构服务器上实现项目国产化。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.yanwq.com/categories/Linux/"/>
    
    
    <category term="docker" scheme="https://www.yanwq.com/tags/docker/"/>
    
    <category term="arm64" scheme="https://www.yanwq.com/tags/arm64/"/>
    
    <category term="sqlite" scheme="https://www.yanwq.com/tags/sqlite/"/>
    
    <category term="达梦数据库" scheme="https://www.yanwq.com/tags/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ部署和使用文档</title>
    <link href="https://www.yanwq.com/2024/03/20/RabbitMQ%E9%83%A8%E7%BD%B2/"/>
    <id>https://www.yanwq.com/2024/03/20/RabbitMQ%E9%83%A8%E7%BD%B2/</id>
    <published>2024-03-20T11:13:31.495Z</published>
    <updated>2024-03-20T11:19:03.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rabbitmq部署和使用文档"><a class="markdownIt-Anchor" href="#rabbitmq部署和使用文档"></a> RabbitMQ部署和使用文档</h2><h4 id="1拉取镜像"><a class="markdownIt-Anchor" href="#1拉取镜像"></a> 1.拉取镜像</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq</span><br></pre></td></tr></table></figure><h4 id="2启动服务"><a class="markdownIt-Anchor" href="#2启动服务"></a> 2.启动服务</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart always --name rabbitmq -p <span class="number">5672</span>:<span class="number">5672</span> -p <span class="number">15672</span>:<span class="number">15672</span> rabbitmq:latest</span><br></pre></td></tr></table></figure><h4 id="3简单的go实现发送和接收消息代码"><a class="markdownIt-Anchor" href="#3简单的go实现发送和接收消息代码"></a> 3.简单的go实现发送和接收消息代码</h4><p><code>Sned.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 尝试连接RabbitMQ，建立连接</span></span><br><span class="line"><span class="comment">// 该连接抽象了套接字连接，并为我们处理协议版本协商和认证等。</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">&quot;amqp://guest:guest@ip:port/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;connect to RabbitMQ failed, err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建一个通道，大多数API都是用过该通道操作的。</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open a channel failed, err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 声明消息要发送到的队列</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line"><span class="string">&quot;task_queue&quot;</span>, <span class="comment">// name</span></span><br><span class="line"><span class="literal">false</span>,         <span class="comment">// 持久的</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// delete when unused</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// 独有的</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,          <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;declare a queue failed, err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 将消息发布到声明的队列</span></span><br><span class="line">body := <span class="string">&quot;Hello World!&quot;</span> <span class="comment">//发送的消息</span></span><br><span class="line">err = ch.Publish(</span><br><span class="line"><span class="string">&quot;&quot;</span>,     <span class="comment">// exchange</span></span><br><span class="line">q.Name, <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// 立即</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// 强制</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">Body:        []<span class="type">byte</span>(body),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;publish a message failed, err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot; [x] Sent %s&quot;</span>, body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>receive.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//1.建立连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">&quot;amqp://guest:guest@ip:port/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;connect to RabbitMQ failed, err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.获取channel</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open a channel failed, err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.声明队列</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line"><span class="string">&quot;task_queue&quot;</span>, <span class="comment">// name</span></span><br><span class="line"><span class="literal">false</span>,         <span class="comment">// 声明为持久队列</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// delete when unused</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,          <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ch.Qos() failed, err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.获取接收消息的delivery通道</span></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">&quot;&quot;</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">true</span>,  <span class="comment">// auto-ack, 如果是false,关闭自动消息确认</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no-local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ch.Consume failed, err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> msgs &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Received a message: %s&quot;</span>, d.Body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;rabbitmq部署和使用文档&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#rabbitmq部署和使用文档&quot;&gt;&lt;/a&gt; RabbitMQ部署和使用文档&lt;/h2&gt;
&lt;h4 id=&quot;1拉取镜像&quot;&gt;&lt;a class=&quot;markdownIt-</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="rabbitMQ" scheme="https://www.yanwq.com/tags/rabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Linux执行mysql命令</title>
    <link href="https://www.yanwq.com/2024/03/20/linux%E6%89%A7%E8%A1%8Cmysql%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.yanwq.com/2024/03/20/linux%E6%89%A7%E8%A1%8Cmysql%E5%91%BD%E4%BB%A4/</id>
    <published>2024-03-20T11:13:25.510Z</published>
    <updated>2024-03-20T11:17:50.560Z</updated>
    
    <content type="html"><![CDATA[<p>如果是dockers容器，需要先进入容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql sh</span><br></pre></td></tr></table></figure><p>然后登陆mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">输入密码</span><br></pre></td></tr></table></figure><p>显示数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>打开数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br><span class="line"></span><br><span class="line">例如:use kvpl;</span><br></pre></td></tr></table></figure><p>显示表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p>显示表中记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名;</span><br><span class="line"></span><br><span class="line">例如：select * from node;</span><br></pre></td></tr></table></figure><p>建库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database 库名;</span><br></pre></td></tr></table></figure><p>建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 表名;</span><br></pre></td></tr></table></figure><p>删库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database 库名;</span><br></pre></td></tr></table></figure><p>删表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名;</span><br></pre></td></tr></table></figure><p>删除表中所有记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果是dockers容器，需要先进入容器&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.yanwq.com/categories/Linux/"/>
    
    
    <category term="mysql" scheme="https://www.yanwq.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>go-zero的基本使用</title>
    <link href="https://www.yanwq.com/2024/03/20/go-zero%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/"/>
    <id>https://www.yanwq.com/2024/03/20/go-zero%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</id>
    <published>2024-03-20T11:11:28.357Z</published>
    <updated>2024-03-20T11:17:50.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-zero的基本使用"><a class="markdownIt-Anchor" href="#go-zero的基本使用"></a> go-zero的基本使用</h1><blockquote><p>安装就不赘述了，照着<a href="https://go-zero.dev/cn/prepare.html">官方文档</a>即可，装好Goctl和protoc</p></blockquote><h3 id="1-创建api工程"><a class="markdownIt-Anchor" href="#1-创建api工程"></a> 1. 创建API工程</h3><blockquote><p>goctl 工具创建工程分为两种，一种是api工程，一种是rpc工程，如下：</p><p>api：goctl api go -api user.api -dir .</p><p>rpc：goctl rpc proto -src user.proto -dir .</p><p>其中，rpc工程的创建依赖.proto文件，而api工程的创建依赖.api文件</p></blockquote><ul><li>创建目录：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir go-zero-test</span><br></pre></td></tr></table></figure><ul><li>创建user接口工程的目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p user/api &amp;&amp; cd user/api</span><br></pre></td></tr></table></figure><ul><li><p>用goland打开这个文件，创建<code>go.mod</code></p></li><li><p>添加api文件</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim user.api</span><br><span class="line"></span><br><span class="line">type (</span><br><span class="line">HelloReq &#123;</span><br><span class="line">Name string `form:&quot;name&quot;`</span><br><span class="line">&#125;</span><br><span class="line">HelloRes &#123;</span><br><span class="line">Code int    `json:&quot;code&quot;`</span><br><span class="line">Msg  string `json:&quot;msg&quot;`</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service user-api &#123;</span><br><span class="line">@handler hello</span><br><span class="line">get /user/hello (HelloReq) returns (HelloRes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建api工程</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goctl api go -api user.api -dir .</span><br></pre></td></tr></table></figure><p>可以看到生成了很多文件，<a href="https://go-zero.dev/cn/api-dir.html">文件结构看这里</a></p><h3 id="2-编写业务逻辑"><a class="markdownIt-Anchor" href="#2-编写业务逻辑"></a> 2. 编写业务逻辑</h3><ul><li>user/api/internal/logic/hellologic.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *HelloLogic)</span></span> Hello(req *types.HelloReq) (*types.HelloRes, <span class="type">error</span>) &#123;</span><br><span class="line">msg := fmt.Sprintf(<span class="string">&quot;Hello %s&quot;</span>, req.Name)</span><br><span class="line"><span class="keyword">return</span> &amp;types.HelloRes&#123;Code: <span class="number">0</span>, Msg: msg&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入<code>api</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd api</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run user.go</span><br></pre></td></tr></table></figure><ul><li>访问 <a href="http://localhost:8888/user/hello?name=hh">http://localhost:8888/user/hello?name=hh</a></li></ul><h3 id="3-model层使用"><a class="markdownIt-Anchor" href="#3-model层使用"></a> 3. model层使用</h3><blockquote><p>可以归纳为以下步骤：</p><ol><li>执行命令生成model文件 goctl model  xxx</li><li>config.go和yaml添加数据库和缓存的配置项</li><li>上下文中注入依赖 servicecontext.go</li><li>使用，从上下文中取出来用，<a href="http://l.svcCtx.XxxModel.Xxx">l.svcCtx.XxxModel.Xxx</a>()</li></ol><p>另外，model层可以简便的切换为Gorm，但是api层就很难切换为Gin了。</p></blockquote><h4 id="31-model生成"><a class="markdownIt-Anchor" href="#31-model生成"></a> 3.1 model生成</h4><ul><li>在数据库中创建一张user表</li><li>在user目录下创建model目录</li><li>执行命令生成</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd user/model</span><br><span class="line">goctl model mysql datasource -url=&quot;root:123456@tcp(127.0.0.1:3306)/go-zero-test&quot; -table=&quot;user&quot; -c -dir .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以用sql文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">goctl model mysql ddl -src user.sql -<span class="built_in">dir</span> . -c</span></span><br></pre></td></tr></table></figure><h4 id="32-配置"><a class="markdownIt-Anchor" href="#32-配置"></a> 3.2 配置</h4><ul><li>添加mysql配置项 <code>vim api/internal/config/config.go</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package config</span><br><span class="line"></span><br><span class="line">import &quot;github.com/tal-tech/go-zero/rest&quot;</span><br><span class="line"></span><br><span class="line">type Config struct &#123;</span><br><span class="line">    rest.RestConf</span><br><span class="line">    </span><br><span class="line">    Mysql struct&#123;</span><br><span class="line">        DataSource string</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CacheRedis cache.CacheConf</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件添加 <code> vim api/etc/user-api.yaml</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mysql:</span><br><span class="line">  DataSource: $user:$password@tcp($url)/$db?charset=utf8mb4&amp;parseTime=true&amp;loc=Asia%2FShanghai</span><br><span class="line">CacheRedis:</span><br><span class="line">  - Host: $host</span><br><span class="line">    Pass: $pass</span><br><span class="line">    Type: node</span><br></pre></td></tr></table></figure><h4 id="33-上下文注入model"><a class="markdownIt-Anchor" href="#33-上下文注入model"></a> 3.3 上下文注入model</h4><p><code>api/internal/svc/servicecontext.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ServiceContext <span class="keyword">struct</span> &#123;</span><br><span class="line">    Config    config.Config</span><br><span class="line">    UserModel model.UserModel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServiceContext</span><span class="params">(c config.Config)</span></span> *ServiceContext &#123;</span><br><span class="line">    conn:=sqlx.NewMysql(c.Mysql.DataSource)</span><br><span class="line">    <span class="keyword">return</span> &amp;ServiceContext&#123;</span><br><span class="line">        Config: c,</span><br><span class="line">        UserModel: model.NewUserModel(conn,c.CacheRedis),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="34-修改接口文件"><a class="markdownIt-Anchor" href="#34-修改接口文件"></a> 3.4 修改接口文件</h4><ul><li>user.api，添加登录接口</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;v1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (</span><br><span class="line">HelloReq &#123;</span><br><span class="line">Name <span class="type">string</span> <span class="string">`form:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line">HelloRes &#123;</span><br><span class="line">Code <span class="type">int</span>    <span class="string">`json:&quot;code&quot;`</span></span><br><span class="line">Msg  <span class="type">string</span> <span class="string">`json:&quot;msg&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginReq &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line">LoginReply &#123;</span><br><span class="line">Id           <span class="type">int64</span>  <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name         <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Gender       <span class="type">string</span> <span class="string">`json:&quot;gender&quot;`</span></span><br><span class="line">AccessToken  <span class="type">string</span> <span class="string">`json:&quot;accessToken&quot;`</span></span><br><span class="line">AccessExpire <span class="type">int64</span>  <span class="string">`json:&quot;accessExpire&quot;`</span></span><br><span class="line">RefreshAfter <span class="type">int64</span>  <span class="string">`json:&quot;refreshAfter&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service user-api &#123;</span><br><span class="line">@handler login</span><br><span class="line">post /api/user/login (LoginReq) returns (LoginReply)</span><br><span class="line"></span><br><span class="line">@handler hello</span><br><span class="line">get /api/user/hello (HelloReq) returns (HelloRes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再次执行goctl更新api</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goctl api go -api user.api -dir .</span><br></pre></td></tr></table></figure><h4 id="35-逻辑层使用model"><a class="markdownIt-Anchor" href="#35-逻辑层使用model"></a> 3.5 逻辑层使用model</h4><ul><li><code>api/internal/logic/loginlogic.go</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LoginLogic)</span></span> Login(req types.LoginReq) (*types.LoginReply, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(strings.TrimSpace(req.Username)) == <span class="number">0</span> || <span class="built_in">len</span>(strings.TrimSpace(req.Password)) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;参数错误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">userInfo, err := l.svcCtx.UserModel.FindOneByName(req.Username)</span><br><span class="line"><span class="keyword">switch</span> err &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">case</span> model.ErrNotFound:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;用户名不存在&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> userInfo.Password != req.Password &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;用户密码不正确&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;types.LoginReply&#123;</span><br><span class="line">Id:          userInfo.Id,</span><br><span class="line">Name:        userInfo.Username,</span><br><span class="line">Gender:      strconv.FormatInt(userInfo.Gender, <span class="number">10</span>),</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>model自动生成的只有简单的增删改查，没有根据字段名的查询，这里可以自己实现<code>FindOneByName</code>函数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *defaultUserModel)</span></span> FindOneByName(username <span class="type">string</span>) (*User, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> resp User</span><br><span class="line">query := <span class="string">&quot;select * from user where username = ? limit 1;&quot;</span></span><br><span class="line">err := m.QueryRowNoCache(&amp;resp, query, username)</span><br><span class="line"><span class="keyword">switch</span> err &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">return</span> &amp;resp, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> sqlc.ErrNotFound:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrNotFound</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-jwt的使用"><a class="markdownIt-Anchor" href="#4-jwt的使用"></a> 4. jwt的使用</h3><blockquote><p>步骤归纳：</p><ol><li>config.go和yaml添加Auth配置项</li><li>编写token生成函数</li><li>需要鉴权的接口在api文件中添加jwt:Auth声明</li><li>重新执行命令生成api代码</li></ol></blockquote><h3 id="5-中间件"><a class="markdownIt-Anchor" href="#5-中间件"></a> 5. 中间件</h3><blockquote><p>步骤归纳：</p><ol><li>api文件中添加middleware声明</li><li>重新执行命令生成api代码</li><li>上下文中注入依赖</li><li>编写中间件的Handle 处理逻辑</li></ol></blockquote><h3 id="6-rpc服务"><a class="markdownIt-Anchor" href="#6-rpc服务"></a> 6. rpc服务</h3><h4 id="61-创建服务"><a class="markdownIt-Anchor" href="#61-创建服务"></a> 6.1 创建服务</h4><ul><li>编写proto文件</li></ul><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vim user/<span class="function"><span class="keyword">rpc</span>/user.proto</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">syntax = &quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">IdReq</span>&#123;</span><br><span class="line">  <span class="type">int64</span> id = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">UserInfoReply</span>&#123;</span><br><span class="line">  <span class="type">int64</span> id = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">2</span>;</span><br><span class="line">  <span class="type">string</span> gender = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">user</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> getUser(IdReq) <span class="keyword">returns</span>(UserInfoReply)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>生成rpc代码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd service/user/rpc</span><br><span class="line">goctl rpc proto -src user.proto -dir .</span><br></pre></td></tr></table></figure><ul><li><p>如果使用了数据库和缓存记得修改config.go和yaml</p></li><li><p>yaml添加etcd配置</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Etcd:</span></span><br><span class="line">  <span class="attr">Hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2379</span></span><br><span class="line">    <span class="attr">Key:</span> <span class="string">user.rpc</span></span><br></pre></td></tr></table></figure><ul><li><p>如果调用了model层，记得在上下文中注入依赖（svc下servicecontext.go）</p></li><li><p>编写逻辑层</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *GetUserLogic)</span></span> GetUser(in *user.IdReq) (*user.UserInfoReply, <span class="type">error</span>) &#123;</span><br><span class="line">    one, err := l.svcCtx.UserModel.FindOne(in.Id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;user.UserInfoReply&#123;</span><br><span class="line">        Id:     one.Id,</span><br><span class="line">        Name:   one.Name,</span><br><span class="line">        Number: one.Number,</span><br><span class="line">        Gender: one.Gender,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用rpc</li></ul><h4 id="62-调用服务"><a class="markdownIt-Anchor" href="#62-调用服务"></a> 6.2 调用服务</h4><blockquote><p>可以归纳为以下步骤：</p><ol><li>config.go和yaml添加rpc服务端的配置项</li><li>上下文中注入依赖</li><li>逻辑层可以从上下文中取出来调用</li></ol></blockquote><ul><li>在调用端的config.go中加入rpc服务端的配置项</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">     rest.RestConf</span><br><span class="line">     Auth <span class="keyword">struct</span> &#123;</span><br><span class="line">         AccessSecret <span class="type">string</span></span><br><span class="line">         AccessExpire <span class="type">int64</span></span><br><span class="line">     &#125;</span><br><span class="line">     UserRpc zrpc.RpcClientConf</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>yaml中添加rpc服务端的配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">UserRpc:</span></span><br><span class="line">    <span class="attr">Etcd:</span></span><br><span class="line">      <span class="attr">Hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2379</span></span><br><span class="line">      <span class="attr">Key:</span> <span class="string">user.rpc</span></span><br></pre></td></tr></table></figure><ul><li>上下文注入依赖(servicecontext.go)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ServiceContext <span class="keyword">struct</span> &#123;</span><br><span class="line">Config    config.Config</span><br><span class="line">...</span><br><span class="line">UserRpc   userclient.User</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServiceContext</span><span class="params">(c config.Config)</span></span> *ServiceContext &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;ServiceContext&#123;</span><br><span class="line">Config:    c,</span><br><span class="line">...</span><br><span class="line">UserRpc:   userclient.NewUser(zrpc.MustNewClient(c.UserRpc)),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>逻辑层调用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *PingLogic)</span></span> Ping() <span class="type">error</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;ping...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">user, err := l.svcCtx.UserRpc.GetUser(l.ctx, &amp;userclient.IdReq&#123;Id: <span class="number">3</span>&#125;)</span><br><span class="line">fmt.Println(user, err)</span><br><span class="line">    </span><br><span class="line">    fmt.Println(<span class="string">&quot;api调用rpc咯&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h3 id="7-自适应降载保护"><a class="markdownIt-Anchor" href="#7-自适应降载保护"></a> 7. <code>// 自适应降载保护</code></h3><blockquote><p>讲白了就是根据CPU压力来保护服务，压力过高时拒绝新的请求，直到当前积攒的请求处理完、CPU压力降下来后再次开放</p><p>但是目前我还测不出来，不知道是不是因为在windows上的原因，读取不到cpu使用率，从stat日志打出来的内容可以看到每次读取的cpu使用率都是0</p></blockquote><ul><li>在rest和zrpc框架里有可选激活配置</li><li>CpuThreshold，0-1000，默认值900，如果把值设置为大于0的值，则激活该服务的自动降载机制</li><li>如果请求被drop，那么错误日志里会有<code>dropped</code>关键字</li><li><a href="https://go-zero.dev/cn/loadshedding.html">官方文档</a></li></ul><hr /><h3 id="8-熔断"><a class="markdownIt-Anchor" href="#8-熔断"></a> 8. 熔断</h3><ul><li>在gprc调用中已经内置了，无需额外编码</li><li><a href="https://go-zero.dev/cn/breaker-algorithms.html">熔断的算法看官方文档</a></li><li>测试起来比较简单<ul><li>一个api接口、一个rpc接口，api接口调用rpc</li><li>rpc接口内延时1秒，返回错误</li><li>连续请求api接口，会发现刚开始会等待1秒后才接收到响应，到后面已经是瞬间失败了，说明api接口没有再去调用rpc</li></ul></li></ul><hr /><h3 id="9-并发限制"><a class="markdownIt-Anchor" href="#9-并发限制"></a> 9. 并发限制</h3><ul><li>RestConf中有有一个MaxConns配置用来限制并发数量</li><li>当程序中未处理完毕、未返回响应的请求数量超过此配置，后续请求将被直接拒绝</li></ul><hr /><h3 id="10-引擎并发控制方案-periodlimit"><a class="markdownIt-Anchor" href="#10-引擎并发控制方案-periodlimit"></a> 10. 引擎并发控制方案 - PeriodLimit</h3><blockquote><p>通过对zo-zero框架的了解，认为可以将其限流工具-PeriodLimit 作为引擎的并发控制方案之一</p></blockquote><ul><li>举个栗子，在3秒钟内，允许他10个并发</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">seconds = <span class="number">3</span></span><br><span class="line">quota   = <span class="number">10</span></span><br><span class="line">)</span><br><span class="line">l := limit.NewPeriodLimit(seconds, quota, redis.NewRedis(<span class="string">&quot;127.0.0.1:6379&quot;</span>, redis.NodeType), <span class="string">&quot;periodlimit&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>do函数假设是调用引擎的处理函数，而这个函数执行完毕需要耗时3秒</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(l *limit.PeriodLimit, userID <span class="type">string</span>, i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 通过 l.Take 传入的 key 来区分用户</span></span><br><span class="line">code, err := l.Take(userID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logx.Error(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 耗时3秒</span></span><br><span class="line">time.Sleep(time.Second*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> code &#123;</span><br><span class="line"><span class="keyword">case</span> limit.OverQuota:  <span class="comment">// 超出限制</span></span><br><span class="line">logx.Errorf(<span class="string">&quot;OverQuota key: %v&quot;</span>, i)</span><br><span class="line"><span class="keyword">case</span> limit.Allowed:    <span class="comment">// 在限制范围内</span></span><br><span class="line">logx.Infof(<span class="string">&quot;AllowedQuota key: %v&quot;</span>, i)</span><br><span class="line"><span class="keyword">case</span> limit.HitQuota:   <span class="comment">// 达到限制的临界点</span></span><br><span class="line">logx.Errorf(<span class="string">&quot;HitQuota key: %v&quot;</span>, i)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">logx.Errorf(<span class="string">&quot;DefaultQuota key: %v&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> do(l, <span class="string">&quot;user1&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点：</p><ul><li>使用简单、开箱即用；</li><li>基于 <code>redis</code> 计数器，通过调用 <code>redis lua script</code>，保证计数过程的原子性，同时也支持分布式情况下正常计数；</li></ul></li><li><p>缺点：</p><ul><li><p>初始化时传入的时间限制与实际引擎调用的时间需要尽可能接近，否则会有误差；</p></li><li><p>要记录时间窗口内的所有行为记录，如果这个量特别大的时候，内存消耗会变得非常严重；</p></li></ul></li></ul><hr />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;go-zero的基本使用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#go-zero的基本使用&quot;&gt;&lt;/a&gt; go-zero的基本使用&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;安装就不赘述了，照着&lt;a href=&quot;https://go</summary>
      
    
    
    
    <category term="Go" scheme="https://www.yanwq.com/categories/Go/"/>
    
    
    <category term="go-zero" scheme="https://www.yanwq.com/tags/go-zero/"/>
    
  </entry>
  
  <entry>
    <title>163邮箱使用smtp服务发送消息</title>
    <link href="https://www.yanwq.com/2024/03/20/163%E9%82%AE%E7%AE%B1%E4%BD%BF%E7%94%A8smtp%E6%9C%8D%E5%8A%A1%E5%8F%91%E9%80%81/"/>
    <id>https://www.yanwq.com/2024/03/20/163%E9%82%AE%E7%AE%B1%E4%BD%BF%E7%94%A8smtp%E6%9C%8D%E5%8A%A1%E5%8F%91%E9%80%81/</id>
    <published>2024-03-20T11:11:24.477Z</published>
    <updated>2024-03-20T11:18:34.487Z</updated>
    
    <content type="html"><![CDATA[<p>新创建的用户使用smtp服务发送email。会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR:User has no permission</span><br></pre></td></tr></table></figure><p>原因是新注册的163邮箱默认是不开启客户端授权验证的（对自定的邮箱大师客户端默认开启）</p><p>因此登录总是会被拒绝，验证没有权限。解决办法是进入163邮箱，进入邮箱中心——客户端授权密码，选择开启即可，如下截图</p><p><img src="/imgs/image-20220225103533387.png" alt="image-20220225103533387" /></p><p>设置完毕后，在代码中用使用客户端授权密码代替原始的邮箱密码，这样就可以正确的发送邮件了。</p><p>注：如果是很早之前就设置了，还是可以用登录密码，这个需要进入到163邮箱里查看，也可以升级成授权密码登录</p><p>163邮箱：yanwq0811@163.com</p><p>密码：***</p><p>授权密码：BZWLUTMQGIYVOGIZ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;新创建的用户使用smtp服务发送email。会报错&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.yanwq.com/categories/Docker/"/>
    
    
    <category term="consul" scheme="https://www.yanwq.com/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>windows 安装node</title>
    <link href="https://www.yanwq.com/2024/03/20/windows%E5%AE%89%E8%A3%85node/"/>
    <id>https://www.yanwq.com/2024/03/20/windows%E5%AE%89%E8%A3%85node/</id>
    <published>2024-03-20T09:04:36.714Z</published>
    <updated>2024-03-20T09:04:36.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows-安装node"><a class="markdownIt-Anchor" href="#windows-安装node"></a> windows 安装node</h2><p>1.官网下载</p><p><a href="https://nodejs.org/">https://nodejs.org/</a></p><p>2.下载完成打开安装包，一直下一步安装完成</p><p>3.重启命令行，执行 <code>node -v</code> 查看是否安装成功</p><p><img src="/imgs/image-20240320164345776.png" alt="image-20240320164345776" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windows-安装node&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#windows-安装node&quot;&gt;&lt;/a&gt; windows 安装node&lt;/h2&gt;
&lt;p&gt;1.官网下载&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodej</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.yanwq.com/categories/Windows/"/>
    
    
    <category term="node" scheme="https://www.yanwq.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>windows10 安装和使用 ssh</title>
    <link href="https://www.yanwq.com/2024/03/20/windows%E5%AE%89%E8%A3%85ssh/"/>
    <id>https://www.yanwq.com/2024/03/20/windows%E5%AE%89%E8%A3%85ssh/</id>
    <published>2024-03-20T09:04:36.714Z</published>
    <updated>2024-03-20T09:04:36.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows10-安装和使用-ssh"><a class="markdownIt-Anchor" href="#windows10-安装和使用-ssh"></a> windows10 安装和使用 ssh</h2><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><p>1.下载文件</p><p>下载地址：<a href="https://github.com/PowerShell/Win32-OpenSSH/releases">https://github.com/PowerShell/Win32-OpenSSH/releases</a>  本人电脑64位</p><p><img src="/imgs/image-20240320161041186.png" alt="image-20240320161041186" /></p><p>2.安装</p><p>将这个下载好的压缩包，解压到C:\Program Files目录下</p><p><img src="/imgs/image-20240320161153808.png" alt="image-20240320161153808" /></p><p>3.配置到系统环境变量中</p><p><img src="/imgs/image-20240320161257662.png" alt="image-20240320161257662" /></p><p>4.进入到 C盘 -&gt; Users -&gt;对应的用户中 执行cmd运行ssh测试</p><p><img src="/imgs/image-20240320161630214.png" alt="image-20240320161630214" /></p><hr /><h4 id="生成ssh-key"><a class="markdownIt-Anchor" href="#生成ssh-key"></a> 生成SSH key</h4><ol><li>cmd中执行命令生成密钥</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20240320162116918.png" alt="image-20240320162116918" /></p><p>出现这个图说明生成成功</p><p>2.进入C盘 -&gt; Users -&gt; 对应用户中查看,会生成一个 <code>.ssh</code> 文件夹</p><p><img src="/imgs/image-20240320162225264.png" alt="image-20240320162225264" /></p><p>3.读取公钥并添加到github中</p><p><img src="/imgs/image-20240320162410847.png" alt="image-20240320162410847" /></p><p>4.登录到 <code>github.com</code> 中 添加ssh key</p><p><img src="/imgs/image-20240320162918218.png" alt="image-20240320162918218" /></p><p><img src="/imgs/image-20240320163038687.png" alt="image-20240320163038687" /></p><p>5.对此从指定github上拉取项目就不需要验证了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windows10-安装和使用-ssh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#windows10-安装和使用-ssh&quot;&gt;&lt;/a&gt; windows10 安装和使用 ssh&lt;/h2&gt;
&lt;h4 id=&quot;安装&quot;&gt;&lt;a class=&quot;ma</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.yanwq.com/categories/Windows/"/>
    
    
    <category term="node" scheme="https://www.yanwq.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>go-zero 生成和打包api和rpc</title>
    <link href="https://www.yanwq.com/2024/03/20/order%E6%89%93%E5%8C%85/"/>
    <id>https://www.yanwq.com/2024/03/20/order%E6%89%93%E5%8C%85/</id>
    <published>2024-03-20T06:50:10.519Z</published>
    <updated>2024-03-20T07:03:09.197Z</updated>
    
    <content type="html"><![CDATA[<h3 id="api"><a class="markdownIt-Anchor" href="#api"></a> api</h3><h5 id="1goctl-生成orderapi"><a class="markdownIt-Anchor" href="#1goctl-生成orderapi"></a> 1.goctl 生成order.api</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goctl api go -api order.api -dir .</span><br></pre></td></tr></table></figure><h5 id="2构建-order-api-二进制-文件"><a class="markdownIt-Anchor" href="#2构建-order-api-二进制-文件"></a> 2.构建 order-api 二进制 文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd api</span><br><span class="line"></span><br><span class="line">GOOS=linux GOARCH=amd64 go build -o order-api order.go</span><br></pre></td></tr></table></figure><h5 id="3构建order-api镜像"><a class="markdownIt-Anchor" href="#3构建order-api镜像"></a> 3.构建order-api镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t order-api:1.4.0 .</span><br></pre></td></tr></table></figure><h5 id="4保存镜像"><a class="markdownIt-Anchor" href="#4保存镜像"></a> 4.保存镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o order-api.img order-api:1.4.0</span><br></pre></td></tr></table></figure><h4 id="rpc"><a class="markdownIt-Anchor" href="#rpc"></a> rpc</h4><h5 id="1goctl生成orderporto"><a class="markdownIt-Anchor" href="#1goctl生成orderporto"></a> 1.goctl生成order.porto</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goctl rpc protoc order.proto --go_out=./types --go-grpc_out=./types --zrpc_out=.</span><br></pre></td></tr></table></figure><h5 id="2构建-order-rpc-二进制-文件"><a class="markdownIt-Anchor" href="#2构建-order-rpc-二进制-文件"></a> 2.构建 order-rpc 二进制 文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd rpc</span><br><span class="line"></span><br><span class="line">GOOS=linux GOARCH=amd64 go build -o order-rpc order.go</span><br></pre></td></tr></table></figure><h5 id="3构建announcement-api镜像"><a class="markdownIt-Anchor" href="#3构建announcement-api镜像"></a> 3.构建announcement-api镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t order-rpc:1.4.0 .</span><br></pre></td></tr></table></figure><h5 id="4保存镜像-2"><a class="markdownIt-Anchor" href="#4保存镜像-2"></a> 4.保存镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o order-rpc.img order-rpc:1.4.0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;api&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#api&quot;&gt;&lt;/a&gt; api&lt;/h3&gt;
&lt;h5 id=&quot;1goctl-生成orderapi&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1goctl-生成</summary>
      
    
    
    
    <category term="Go" scheme="https://www.yanwq.com/categories/Go/"/>
    
    
    <category term="go-zero" scheme="https://www.yanwq.com/tags/go-zero/"/>
    
  </entry>
  
  <entry>
    <title>wsl2-Ubuntu 安装 go</title>
    <link href="https://www.yanwq.com/2024/03/20/wsl2-ubuntu%E8%A3%85go/"/>
    <id>https://www.yanwq.com/2024/03/20/wsl2-ubuntu%E8%A3%85go/</id>
    <published>2024-03-20T06:49:47.684Z</published>
    <updated>2024-03-20T07:04:55.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows安装sqlite以及使用文档"><a class="markdownIt-Anchor" href="#windows安装sqlite以及使用文档"></a> windows安装sqlite以及使用文档</h2><p>1.重装ubuntu18.04</p><p>2.sudo su 进入root权限</p><ol start="3"><li><p>cd /mnt/d/share  进入到d盘share文件夹下</p></li><li><p>cp go1.16.6.linux-amd64.tar.gz /usr/local/  讲share文件夹下的go.tar拷贝到/usr/local 目录下</p></li></ol><p><a href="http://5.cd">5.cd</a> /usr/local</p><p>6.tar -xvf go.tar  解压go.tar文件</p><p>7.rm -rf go.tar</p><p>8.vim /etc/profile<br />添加：<br />export GOROOT=/usr/local/go<br />export GOPATH=/mnt/d/vagrant/data/gopath/src<br />export GOPROXY=<a href="http://goproxy.cn">http://goproxy.cn</a><br />export <a href="http://GOSUMDB=goproxy.cn">GOSUMDB=goproxy.cn</a><br />export PATH=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mi>O</mi><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mi mathvariant="normal">/</mi><mi>b</mi><mi>i</mi><mi>n</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">GOPATH/bin:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord">/</span><span class="mord mathnormal">b</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>GOROOT/bin:$PATH<br />export SHARE=/mnt/d/share</p><p>9.source /etc/profile</p><p>10.go version</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windows安装sqlite以及使用文档&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#windows安装sqlite以及使用文档&quot;&gt;&lt;/a&gt; windows安装sqlite以及使用文档&lt;/h2&gt;
&lt;p&gt;1.重装ubuntu18.04</summary>
      
    
    
    
    <category term="Ubuntu" scheme="https://www.yanwq.com/categories/Ubuntu/"/>
    
    
    <category term="go" scheme="https://www.yanwq.com/tags/go/"/>
    
    <category term="wsl2" scheme="https://www.yanwq.com/tags/wsl2/"/>
    
  </entry>
  
</feed>
